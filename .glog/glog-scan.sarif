{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "952b4aca-224f-37f6-83e9-1d8d8dc8e067",
              "name": "resources.rules.remove-package-cache",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.remove-package-cache"
              },
              "fullDescription": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3009](https://github.com/hadolint/hadolint/wiki/DL3009)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.remove-package-cache"
                ]
              }
            },
            {
              "id": "c7767672-2bce-34b7-924d-3e5466f68681",
              "name": "resources.rules.prefer-apt-get",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-apt-get"
              },
              "fullDescription": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3027](https://github.com/hadolint/hadolint/wiki/DL3027)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-apt-get"
                ]
              }
            },
            {
              "id": "502a941e-2e68-375e-8049-c4f1465f9b8b",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "91ea276c-c5f9-3e0f-bcf6-96e19dcdd253",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "55c5383e-dd8d-3f77-b262-827c892a07e5",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "3b7023bd-fe2c-3646-8a29-0f13903537e2",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "20a70086-887a-307d-9d85-bb6892ff8b3f",
              "name": "resources.rules.set-pipefail",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.set-pipefail"
              },
              "fullDescription": {
                "text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL4006](https://github.com/hadolint/hadolint/wiki/DL4006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.set-pipefail"
                ]
              }
            },
            {
              "id": "4148a66a-d6b3-35bc-ae5c-8a8f2ceb79bf",
              "name": "resources.rules.remove-package-cache",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.remove-package-cache"
              },
              "fullDescription": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3009](https://github.com/hadolint/hadolint/wiki/DL3009)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.remove-package-cache"
                ]
              }
            },
            {
              "id": "f73eedac-69b6-31dd-bab0-bec62c9081b0",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "a660243f-7561-32c8-b2ed-347b72f79cc1",
              "name": "resources.rules.remove-package-cache",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.remove-package-cache"
              },
              "fullDescription": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3009](https://github.com/hadolint/hadolint/wiki/DL3009)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.remove-package-cache"
                ]
              }
            },
            {
              "id": "609b30b5-4128-3068-812e-2b4ddda690cb",
              "name": "resources.rules.prefer-apt-get",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-apt-get"
              },
              "fullDescription": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3027](https://github.com/hadolint/hadolint/wiki/DL3027)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-apt-get"
                ]
              }
            },
            {
              "id": "d29ec938-7c73-36f3-8176-25d9e1c05ea5",
              "name": "resources.rules.remove-package-cache",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.remove-package-cache"
              },
              "fullDescription": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3009](https://github.com/hadolint/hadolint/wiki/DL3009)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.remove-package-cache"
                ]
              }
            },
            {
              "id": "aaa8b147-2943-3b9c-bedd-6d8950d7e455",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "021c2953-e279-32b7-90f5-7d1bed159a78",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "8a07e63b-e18e-3f97-a05e-9923217d7c00",
              "name": "resources.rules.prefer-copy-over-add",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-copy-over-add"
              },
              "fullDescription": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://snyk.io/blog/10-docker-image-security-best-practices/](https://snyk.io/blog/10-docker-image-security-best-practices/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "fbef83a8-4445-31dd-b1f6-0e0f2bf72d97",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "abb57fb8-2e29-3c58-b262-c43a001af06b",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "a3093918-f5f0-3532-b294-5a30499775ef",
              "name": "resources.rules.prefer-copy-over-add",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-copy-over-add"
              },
              "fullDescription": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://snyk.io/blog/10-docker-image-security-best-practices/](https://snyk.io/blog/10-docker-image-security-best-practices/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "b0c185cb-7d9c-362c-9ae5-f8d5b79735ea",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "f658f5d4-fb19-390f-9939-02f2356ba6c1",
              "name": "resources.rules.prefer-copy-over-add",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-copy-over-add"
              },
              "fullDescription": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://snyk.io/blog/10-docker-image-security-best-practices/](https://snyk.io/blog/10-docker-image-security-best-practices/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "65252285-1d49-367f-af9c-247db1902cb7",
              "name": "resources.rules.prefer-copy-over-add",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-copy-over-add"
              },
              "fullDescription": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://snyk.io/blog/10-docker-image-security-best-practices/](https://snyk.io/blog/10-docker-image-security-best-practices/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "48692327-a2cd-34c4-8d39-25b7c3f20855",
              "name": "resources.rules.prefer-copy-over-add",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-copy-over-add"
              },
              "fullDescription": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://snyk.io/blog/10-docker-image-security-best-practices/](https://snyk.io/blog/10-docker-image-security-best-practices/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "99f80bbe-ee51-38e4-a01c-e261a8d41e09",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "8fff90a4-61ba-3b8f-b8a9-3f81e686aa2a",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "856c15fb-fe3c-3f61-a57e-954b5a429cbf",
              "name": "resources.rules.insecure-file-permissions",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-file-permissions"
              },
              "fullDescription": {
                "text": "Insecure file permissions detected (world-writable or world-executable).\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Insecure file permissions detected (world-writable or world-executable).\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Insecure file permissions detected (world-writable or world-executable).\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-file-permissions"
                ]
              }
            },
            {
              "id": "c9f7bade-e576-31a2-90c1-79d4347360f0",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "975ecbe8-26c6-3e01-9c3f-d6314cec764b",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "f66d9173-1613-3a6a-bdcf-e2d084abbc01",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "129675ec-25cc-306c-9c6c-f1b51b3204d5",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "2007f968-dd15-3bb4-9023-73ee027fbb9d",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "3d646dc6-58b9-30cf-8c8e-6fb40f11628d",
              "name": "resources.rules.insecure-file-permissions",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-file-permissions"
              },
              "fullDescription": {
                "text": "Insecure file permissions detected (world-writable or world-executable).\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Insecure file permissions detected (world-writable or world-executable).\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Insecure file permissions detected (world-writable or world-executable).\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-file-permissions"
                ]
              }
            },
            {
              "id": "0b55e07e-0a6d-3c23-95a2-650fce485cb5",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "bf69037c-0e39-3bcd-8694-fbba44e059ed",
              "name": "resources.rules.prefer-copy-over-add",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-copy-over-add"
              },
              "fullDescription": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://snyk.io/blog/10-docker-image-security-best-practices/](https://snyk.io/blog/10-docker-image-security-best-practices/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "daa5eb4c-30d2-31ce-a015-9712ffc91b1a",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "530ce47d-b523-3b84-ba09-79525845b015",
              "name": "resources.rules.prefer-copy-over-add",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-copy-over-add"
              },
              "fullDescription": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://snyk.io/blog/10-docker-image-security-best-practices/](https://snyk.io/blog/10-docker-image-security-best-practices/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "768fbb0f-c567-3255-b9ac-f121a92a3297",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "98bad7f3-6ee5-36e2-82a6-eb18f4453b79",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "ec14eee8-318f-339b-bb6c-4c77ade428b9",
              "name": "resources.rules.insecure-file-permissions",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-file-permissions"
              },
              "fullDescription": {
                "text": "Insecure file permissions detected (world-writable or world-executable).\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Insecure file permissions detected (world-writable or world-executable).\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Insecure file permissions detected (world-writable or world-executable).\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-file-permissions"
                ]
              }
            },
            {
              "id": "4809309f-851f-3831-9d53-2130efa9c9cc",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "45655008-3b17-367c-a399-85cbfbef7003",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.exec-detected.exec-detected"
              },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "help": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.exec-detected.exec-detected"
                ]
              }
            },
            {
              "id": "b0f30782-e84f-379c-b089-c9e28cc6d5de",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "e654a273-42cf-39ce-b701-68d69a8709e3",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "ae819c29-d8e3-382f-9792-01327de3bde7",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "b0a946f9-8d12-3aa6-849a-c7128c7dc181",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "d0a20ed7-510d-3328-a6f2-e338af5be7b1",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "2c9eac96-3f34-3640-a405-9563f7bae29f",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "cb5ac758-882a-3704-a85c-2c1fd7e77e03",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "3971c184-667b-37df-8036-63206ad27a3c",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "2c29f7ee-7ed2-3a88-9988-1fd588103155",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "afd6f0c6-1b51-3b75-9aec-c94a44809051",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "302933e5-d299-3f6c-8e87-95a0cde686e7",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "53106b2a-e9c6-3572-8e6a-3f367346f6d7",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "a56cd23f-23f0-3197-ac0a-e1f34c88dc97",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "88296e97-25ef-3d6b-ad53-10be07eaec40",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "251b2516-15cf-348f-805e-a705ee3bd978",
              "name": "resources.rules.prefer-copy-over-add",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-copy-over-add"
              },
              "fullDescription": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://snyk.io/blog/10-docker-image-security-best-practices/](https://snyk.io/blog/10-docker-image-security-best-practices/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "0b9e97ba-a76e-3bcd-ab49-4cc31d2fe9aa",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "9473cd98-2da8-3e0f-845d-dac7f3068235",
              "name": "yaml.kubernetes.security.run-as-non-root.run-as-non-root",
              "shortDescription": {
                "text": "Opengrep Finding: yaml.kubernetes.security.run-as-non-root.run-as-non-root"
              },
              "fullDescription": {
                "text": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root",
              "help": {
                "text": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root)\n - [https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/](https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/)\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/](https://kubernetes.io/docs/concepts/policy/pod-security-policy/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "yaml.kubernetes.security.run-as-non-root.run-as-non-root"
                ]
              }
            },
            {
              "id": "ae5bcf75-cce9-3625-8ce0-fd93766ab12f",
              "name": "yaml.kubernetes.security.run-as-non-root.run-as-non-root",
              "shortDescription": {
                "text": "Opengrep Finding: yaml.kubernetes.security.run-as-non-root.run-as-non-root"
              },
              "fullDescription": {
                "text": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root",
              "help": {
                "text": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root)\n - [https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/](https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/)\n - [https://kubernetes.io/docs/concepts/policy/pod-security-policy/](https://kubernetes.io/docs/concepts/policy/pod-security-policy/)\n - [https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "yaml.kubernetes.security.run-as-non-root.run-as-non-root"
                ]
              }
            },
            {
              "id": "758e3ce2-6379-38c1-88c6-a479bfe27bd6",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "efedc1e5-dcf6-3396-87a9-70ba1381737a",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "cf9bec01-f98a-3b9a-9dbc-fb6a5120af7e",
              "name": "resources.rules.request-with-http",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.request-with-http"
              },
              "fullDescription": {
                "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.request-with-http"
                ]
              }
            },
            {
              "id": "3c5295c7-d89b-3fe6-8606-60ff9de68eeb",
              "name": "bash.lang.security.ifs-tampering.ifs-tampering",
              "shortDescription": {
                "text": "Opengrep Finding: bash.lang.security.ifs-tampering.ifs-tampering"
              },
              "fullDescription": {
                "text": "The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS=\",\" read -a my_array'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/bash.lang.security.ifs-tampering.ifs-tampering",
              "help": {
                "text": "The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS=\",\" read -a my_array'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS=\",\" read -a my_array'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/bash.lang.security.ifs-tampering.ifs-tampering)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "bash.lang.security.ifs-tampering.ifs-tampering"
                ]
              }
            },
            {
              "id": "1584fd45-d149-30f6-9ec7-d34f40837f3a",
              "name": "bash.lang.security.ifs-tampering.ifs-tampering",
              "shortDescription": {
                "text": "Opengrep Finding: bash.lang.security.ifs-tampering.ifs-tampering"
              },
              "fullDescription": {
                "text": "The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS=\",\" read -a my_array'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/bash.lang.security.ifs-tampering.ifs-tampering",
              "help": {
                "text": "The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS=\",\" read -a my_array'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS=\",\" read -a my_array'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/bash.lang.security.ifs-tampering.ifs-tampering)\n - [https://owasp.org/Top10/A03_2021-Injection](https://owasp.org/Top10/A03_2021-Injection)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "bash.lang.security.ifs-tampering.ifs-tampering"
                ]
              }
            },
            {
              "id": "9a2c6b0b-7b6c-3557-8b6d-b68c0438dfee",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f8365e5c-7537-35b4-ba68-de1326f91b20",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "a14291e2-9070-3fb2-b241-659f5d582609",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "b4b1f849-f1ed-3d10-bfbf-5160556183af",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "1c1f1db8-8786-368f-a567-eff4da3d2741",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "029104f2-1f47-323b-abb3-df176cd70258",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "a0b83f28-300a-3bbd-b9d3-0d5f140cea7c",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "e9186333-b2a2-3dc1-93a7-15edf7eb7f8e",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "fe4bd58a-4cbf-379b-a531-0206c95c535d",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f396f5ef-bed1-3331-8741-115b5e9ee9ab",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "3a71f274-f4e4-3312-8b16-b68df54933ee",
              "name": "resources.rules.request-with-http",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.request-with-http"
              },
              "fullDescription": {
                "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.request-with-http"
                ]
              }
            },
            {
              "id": "457d498f-ddd1-3d7d-8baa-a0cc82b6863d",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "14ae83eb-d139-32fe-a6af-a511c6399b35",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "14b64260-b5e0-3188-9a24-7fb24cf3fe66",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "9f616630-70ea-32e4-b489-5707e4f00512",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "eda122da-7d3d-3886-b54d-f020d9e40156",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "fef3702d-62fe-3fd3-80e2-1d7fd508d452",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "b2a77edb-e2f2-3e07-bad5-3b9177118659",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "0865c57e-dd4e-3ba4-ab3c-f913fa5e92ed",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "3f8b5372-f756-397d-a33c-89baa2450d15",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "d848c56f-e629-3488-b5ee-0c4d7efa5acc",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "2188f820-eaf7-3139-b1f8-36b5f0f9fecc",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "97285c0c-39bd-33da-b6a3-9c245ee6a4d0",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "0e4823b6-8541-3be5-aa3d-73963038e6d6",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "785217dd-ae28-30f5-ba71-ceee1f19b5a3",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "b0c4a81b-4395-3f05-afe9-e010a95da82f",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "8d1f83d8-8d2d-349c-87a3-aa327c2ff054",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "2c601d09-e032-3d08-96cc-4d2b0eaa347c",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "231bc188-879e-3ba6-92ee-1724937e7831",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "a68f859f-a8a0-38f3-8777-ded2eda83147",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "9d67e957-7249-3bec-a533-679494e43161",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "33f455c3-bff1-3736-9d31-012fb1da5ba3",
              "name": "python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.dangerous-globals-use.dangerous-globals-use"
              },
              "fullDescription": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use",
              "help": {
                "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use)\n - [https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186](https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.dangerous-globals-use.dangerous-globals-use"
                ]
              }
            },
            {
              "id": "25a2cf4e-ee4f-3d6b-bcb3-3eb35217cf27",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "fdf25658-f01d-3855-b597-22963b57c7be",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "d6523f5d-0412-356f-ad59-7c6057356cbd",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "c700f17d-3444-3a3e-b138-866bcb31ce70",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "6802d45c-1311-3071-87af-685894b388b5",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "8e6ae640-5021-319f-b4fd-628ec4d4e1fc",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "32d81402-2294-3fdd-a3c0-7b68d71fdf8b",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "935af63a-1351-34d3-babb-72f05c75998c",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "8afeb4ff-15dd-3d26-91b5-b076fa3ee319",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "6bead17b-2630-30ad-b570-1312d520a41e",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "f3f1e231-dcba-3194-9ef0-e9fdb2e43eb7",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "2f211b08-d4fa-3f6e-84ae-0e0c4e5cfbb8",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "a49ebdaf-2277-36fd-94c2-05a09a2513cb",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "5df13795-9545-3c81-92b9-e4d4ef82c179",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "9868628b-114c-3699-9e95-f06c748afc39",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "f2c8ba0d-3641-3b25-91b1-e6ebce6f0701",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "024346ee-246c-3799-a1f2-3a2a9e3b270f",
              "name": "resources.rules.missing-internal",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-internal"
              },
              "fullDescription": {
                "text": "This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md](https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md)\n - [https://nginx.org/en/docs/http/ngx_http_core_module.html#internal](https://nginx.org/en/docs/http/ngx_http_core_module.html#internal)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-internal"
                ]
              }
            },
            {
              "id": "64100bf6-4b02-3f89-83ae-aecde49889b3",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "4ce76412-9fda-3b33-9587-aaf78409199a",
              "name": "generic.nginx.security.missing-ssl-version.missing-ssl-version",
              "shortDescription": {
                "text": "Opengrep Finding: generic.nginx.security.missing-ssl-version.missing-ssl-version"
              },
              "fullDescription": {
                "text": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/generic.nginx.security.missing-ssl-version.missing-ssl-version",
              "help": {
                "text": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.missing-ssl-version.missing-ssl-version)\n - [https://www.acunetix.com/blog/web-security-zone/hardening-nginx/](https://www.acunetix.com/blog/web-security-zone/hardening-nginx/)\n - [https://nginx.org/en/docs/http/configuring_https_servers.html](https://nginx.org/en/docs/http/configuring_https_servers.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "generic.nginx.security.missing-ssl-version.missing-ssl-version"
                ]
              }
            },
            {
              "id": "86824dc6-d5b3-3b04-91de-88efdb5df391",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "e302f9d2-e697-3d23-a744-c256135e551d",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "d65fe27b-17ab-3f6f-8e74-561178adcfcc",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "89ca61f0-3698-34e3-b263-776d820eb108",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "fb0068d7-b329-3230-841f-2e4b36821dc2",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "d72bf9cf-bf95-36de-89c9-3038cd4f34c4",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "50adfecc-614f-3780-94a8-560ee4644c69",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "8cda9054-eda4-3a6f-99cf-d6d914d188ae",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f5aac143-1889-3a92-bfc1-4174fefc367d",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "ba465b36-f9db-337b-b5ce-d95083f68423",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "e3bce753-5f22-34b0-9f93-703fd4b42b8d",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "6819863b-0419-3eab-a93f-dd625e201549",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f365e053-3e83-394b-9481-7a9a2ee1c87f",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "251bda8e-279b-361e-978b-332bd1fd7c6d",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "14536c0d-6b12-3d30-b446-0f51441a9272",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "a2e4e638-522d-322c-9033-52320a3486eb",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "35794d7b-d0a6-34e6-b09b-918acb466691",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "67b9004b-6e79-3ca2-a820-cf8cc5c49f85",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "5e766de7-40f9-3ea6-8c80-fa9deaa3a86c",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "0dbac08b-9543-3847-a1d2-716220c6e8f8",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "aee42f32-f4e3-35ee-a3de-fb61f7fcf48e",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "d0078a83-b64c-33b9-9105-869926684647",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "873356dc-b159-300f-8df6-90327a0f2fe7",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "7c3d5785-2ad2-37ae-80e5-2214323fbfc5",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "cea676c5-725d-3558-bb7f-5c22623d186b",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "cd04855c-2eac-39b3-843c-15b8a00d7ed5",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "d3bcaca6-92e8-3931-8654-483338ce86b4",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "085fb396-733f-3905-82af-835a00f8ffd9",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "877dbad1-e213-31f7-bad5-1d086f338f47",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "2107bc55-14e6-3862-9d98-8f1f7021f2a6",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "d6760f95-5843-3392-9ab4-42a87fb9c7b1",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "a9b629d9-0518-380a-a148-b11713427e57",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "ded9ad8b-84a8-3dfd-ae13-86f9bfd4580b",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "00797a3e-d68e-3a7e-b0c6-325cde170ba4",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "d6e9e4e9-c1f3-3994-bd38-734d27b7894d",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "795dfde2-0fdd-3cf5-b525-7007a796e8ad",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "4071d7bb-8849-3b5d-ae70-77e19d438371",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "f61c26d9-83a8-3d44-8112-cd6da2855ec7",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "39e309e4-7cf0-33c3-b042-8f9b37c384af",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "b8bbc67e-161f-34a5-b891-20d3972dae33",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "e2703f46-ff79-382e-8470-c463865d2cfe",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f4a4be85-6a5a-3242-af04-334156d3bc7c",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "022413b8-44a4-3054-bf17-e7f14ffcd913",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "1d1dba05-9115-363f-8ee2-293dbae33a70",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "e108c06e-63ba-3f5d-8e42-458a403ea221",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "fc7c148b-92a3-32e8-81d4-4c1220a3680c",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "b7f5cf55-bf0e-3214-b25b-68cf37a9cbda",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "edb88c2a-994c-37f8-a72e-bf20ac163572",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "c9275bf5-013d-375d-a554-cbed5587bd05",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "1563c8d8-3eca-3908-b4bd-4420abea23b5",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f7e8f2b5-8839-3f9f-a539-7145d5d3a897",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "86344cb4-7db6-3211-b0b1-f1758142f7f2",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "0b2a92d5-f3dd-3c99-a23d-9ced5039a010",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "d40302f8-23f3-3d3b-8818-0c098f3230f4",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "19f19478-b13b-322e-a6dc-bdaa90a20842",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "4a75e4d6-522c-34ca-9587-a079a1f131dd",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "ced6816c-ae8d-3cd7-91c2-aff8b82e56f4",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "bc244e28-93c9-3ddf-bfcb-14b49bfbbe63",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "ce1a2b7b-22d8-3e34-b6cb-5eb7f798b600",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "6f2acde8-21fb-3572-ad45-fab1ae659766",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f1c205de-ad27-3a1c-86b7-4ba7a0b64edf",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "a5c8b39c-8be5-31bc-a250-53f0afc4eb21",
              "name": "resources.rules.request-with-http",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.request-with-http"
              },
              "fullDescription": {
                "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.request-with-http"
                ]
              }
            },
            {
              "id": "a5db47b6-6ae1-3aba-90a1-bde15851c5d4",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "83217e96-199f-3178-80f3-9c0f2b2f6f0b",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "83595708-f926-3e41-beeb-c62e97c81cf3",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "2cede3de-55b1-3e28-a064-ae6c0330c3cb",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "aefa82d8-df28-331e-9fb5-3e1eb24b5820",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "819aa8eb-d525-337c-976f-9362f5623345",
              "name": "generic.nginx.security.missing-ssl-version.missing-ssl-version",
              "shortDescription": {
                "text": "Opengrep Finding: generic.nginx.security.missing-ssl-version.missing-ssl-version"
              },
              "fullDescription": {
                "text": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/generic.nginx.security.missing-ssl-version.missing-ssl-version",
              "help": {
                "text": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/generic.nginx.security.missing-ssl-version.missing-ssl-version)\n - [https://www.acunetix.com/blog/web-security-zone/hardening-nginx/](https://www.acunetix.com/blog/web-security-zone/hardening-nginx/)\n - [https://nginx.org/en/docs/http/configuring_https_servers.html](https://nginx.org/en/docs/http/configuring_https_servers.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "generic.nginx.security.missing-ssl-version.missing-ssl-version"
                ]
              }
            },
            {
              "id": "f2cf68c7-6e7a-3cfc-9ccb-d4720d762319",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "7c5d86d7-87b5-33bb-880f-8ee64a94aa3e",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "ba062445-e686-34db-bac7-58aed617946f",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "bb402a35-1390-3779-9e98-33338c931884",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "fde487d7-e5ff-3203-866c-70ded9b85858",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "c621aa16-a34d-3b40-be94-31eded9cb407",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "b8ce4617-f90e-3f25-bc8e-3dfbce357fef",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "526191e7-5210-30b5-bc90-990185421d49",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "e5315dbc-9014-30e6-9579-eb676277bf3a",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "ebcb966e-0287-3ce8-9861-8c22df769409",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f2e072a8-c244-304b-b5d2-eed08712c105",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "deade1f1-ac3b-30be-9074-55c666a30f1a",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "04ff0216-aa98-374d-96cc-54aba58446b8",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "af5d35f2-9152-3c76-94bd-b667a9c86ed8",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "c90a5df7-6354-3909-b07c-86ea760f6b04",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "e20abb0d-f332-326a-89cd-bc6613d0fb31",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "68a4d23c-a004-3ad8-aabd-a2eece2a86b5",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "a885e128-5055-3f6f-9c90-13082a5427fa",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "1656c3dd-4621-3808-a3d4-49d0065f56de",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f39a1ee9-b9b5-3dd4-a5fd-b08afd0f2475",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "e47b0232-487b-331d-8a23-f2fd950645a2",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "e02b28bc-4f0b-30eb-a096-d404e76b3a33",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "eeba5a04-d061-31c3-884a-0849032808aa",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "6b4f91c5-fcda-3cf9-b3de-7eeee9f8251b",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "1e6f1525-e256-363d-8275-1403e3bdab98",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "edcfb19a-b9b4-38bb-b36f-2e8f81b280ca",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "3836de5f-bfd0-32d3-b884-d3f6402b1b50",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "a690d959-2331-3a44-8313-c69604713665",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "3e845549-5a27-3035-a544-1f335f75825c",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "f423c71b-44c6-397a-9054-130ffb393366",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "25e8bd4b-f2db-33d8-8fad-0146dba9ac14",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "437d7e46-8de9-3489-ba90-42b575a1090c",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "13c337fa-bc52-37f9-a335-59c32262164c",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "457f74bf-bb65-3536-b514-4d2c52ad18af",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "8a1815b9-9bdb-3fc9-8c16-1c3f6a92f399",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "23c102d7-e2bb-3f96-a071-951f6d009419",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "ab7d94c0-706c-30a5-90f7-72af35533a01",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "fd8d11a4-57c6-3a28-ad42-3428068fef57",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "d8ce7064-d5ec-3f9a-82e1-c560735d59a4",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "85116732-7a51-31f3-841d-324967f8737d",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "02128ee8-8a98-32d2-a5c8-7ab9bf3b8227",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "c8237f4a-4164-3c6e-92a3-54062ae2385c",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "45f9f54e-c316-3153-8a23-f4a606f22ff7",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "ff802db3-549c-359e-86fa-0207ffdbe2c7",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "644a19b2-3a1a-37a1-9900-15d4d9b90a13",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "b9c6dad1-c702-3375-99c0-bf667d53a40e",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "e48388b2-af71-37c1-8aed-d390c3577d8e",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "d5fd5717-b5e9-3f56-b19f-2e63a2e8da61",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "a4d95e3c-693d-385b-a487-b55380ef4ccd",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "515868fb-5362-3691-b3a4-dd17929cebb4",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "e0ccf5c5-2af1-3bd9-b27c-4fc4e03d4eb0",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "84177c09-64e3-3cc9-a782-2b2f17012be5",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "82a261d5-6a03-380f-900e-6cc509c7e1fb",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "96f0da24-0d49-3753-8a14-9ff4f92ab7f7",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "54ac5789-319c-320d-be99-3965acae1357",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f0c64bc3-121a-393f-bbcd-744f14642dde",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "b4b74a28-81b9-3eba-b38c-6edb2ee2e3bc",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "0d55c15d-3785-3286-b08f-f30ae60f7aef",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f9e42e18-9e7f-30bc-85d3-a5bbd1699930",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "5e80612c-6775-3705-b9df-281d0dca4760",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "08d0fcae-d825-347b-a8c5-5fd2d6040e34",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "666a5d0b-4d86-314a-b857-53ebec845d05",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "47412823-4c77-3aab-aa97-e08645800020",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "3628f1db-1b87-3e45-8508-be8559b0d83b",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "7b5fb90a-1df1-39c9-aed8-b81728bf33ea",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "d2b24d89-5c47-377e-97d5-926696b825eb",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "63dc57fd-e18e-3ab2-860c-0cc641931d65",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "cb987b79-6f9e-3bc2-93ff-5bdfd10940a2",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "e4b9e22d-29ff-3335-83f4-ebd45562b783",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "af2758ec-4a46-37c1-ac3b-a0b95579804f",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "01c51bab-8f42-39d5-9517-2f59ed756e82",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "097e4e44-700d-38a9-a12a-560c83832fc3",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "b642f807-c1a1-3ea5-a73a-1d36dc581844",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f4093371-4e24-38b9-8a35-e45493363ab7",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "14f995d3-757c-3f40-9221-3ea8210899d2",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "af5f96da-7e80-3ca4-a8ca-7ae28408b6a9",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "1e23649c-49e0-3e5b-a0fc-e95d77e33619",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "dcc2acca-9f07-3d2e-99b4-998792656263",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "eec7fd67-7e71-3373-ba89-6333d8add123",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f1ff08f4-a0ee-3faf-8ee8-dfb8c1ad74a4",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "4a2176cd-4962-3053-80d9-deb429f4d023",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "53c70fc3-0fed-3c1b-b58c-00dbbefd393e",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "0b8c1f62-42e3-364b-bf30-d41d7bc85baf",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "d0096f20-1dd6-3f09-b808-4872370bc855",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "e4566c72-8cd9-3747-881d-9750f0a7ee06",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "e014a839-2df7-3013-84bd-b0b13b37e345",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f4e85076-7a39-3e5b-9cfd-adb9a4c51b2f",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "0f9b51e5-21a6-34fb-9466-27c39b648725",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "2f704d20-17d1-32e8-a7be-a9283e14f55f",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "01bdd62c-7206-3ff9-9dc3-91e84842f742",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "dd971842-4316-3931-b8c3-27b9232367a0",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "fa4f9897-4bb7-3d43-bd97-d7bc0045c953",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "3807c477-8fff-3041-872a-0443a7bfc93b",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "1f6b7fc3-1ae9-3e92-9d7e-84a7dad09f4c",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "eb7bbf37-3d47-3302-bfe4-822843da9411",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "9a529628-61f9-36a1-b8ca-6ff95ad98be3",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "6630052e-be6f-3f14-87ac-88993e66f365",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "d28484a2-1d62-3916-8fb1-f1ccb360a531",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "d96a02c3-b783-3a42-b8ae-143744804dd2",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "f7c7f733-f89b-3995-b0fe-036466703d72",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "ff08a4e2-1940-337a-bb28-554b417a506c",
              "name": "resources.rules.use-timeout",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-timeout"
              },
              "fullDescription": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-timeout"
                ]
              }
            },
            {
              "id": "997517e4-08f9-309c-a1bd-b33db861d869",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "85730a4b-dec3-32a7-a15c-a37e7450810f",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "e6bbf68f-8e5a-3649-94ff-b159b500aaf4",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "f6d59a58-2b19-3404-89e3-abce8bd56808",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "bda2fc53-273b-3f18-8586-fa31d107626c",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "5ee3cead-7799-3f38-92bb-abbda7a0d103",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "b3eaeb84-2f41-3863-8117-812edeaf2748",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "69d42677-1f84-3902-95cc-409474bca1ac",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "2c39d50d-c152-30dc-9f85-1797bb31462a",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "9c0dd390-6053-3a94-a914-a3b99683d138",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "5cdbbdf2-9cd4-3e26-8723-b9d50c1b870e",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "94d81afa-3cdb-3206-9cf3-9449fa14d583",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "6c90ca2a-b8f2-3398-89ad-fcd76f8c274a",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "c79c0f10-0185-37a3-bbf0-d0d9a9aae041",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "a738b40c-f321-3dfa-ab6e-d939cc34f890",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "41a2a572-46ce-333d-a7f5-def71c765b3a",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ead02e40-36a0-3241-9b3e-2f288126120f",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "939efb0b-a629-3a29-9319-6ef9ab0cb8d0",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "9505e629-a44d-36d2-bc87-5379d8f52386",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "7f575e20-224b-3c13-8454-34cf132947a2",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "8d020bd7-ce27-3524-8f49-453d70bbf092",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "a8124711-2815-3416-8192-32c32d242f87",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "e41d78de-3caf-3107-9e6b-5e4b91c30ab9",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "fe93057f-9151-3870-8b03-502556aaed55",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "1eb9bff8-571a-3768-a289-196bf1d07471",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "f3174e22-9c8a-3a65-b5dd-8a39fe6af188",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "0e732751-e256-3b62-999c-6dda15fd3622",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "d9686ee2-dfed-37b9-9866-efb01740635d",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "67c6695f-bcd6-37c4-8214-907421eb88c5",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "28313bee-46ff-35d9-941a-4fbb625919fb",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "5f41ad2f-56fa-3ac4-9246-38b7bb0bac0d",
              "name": "resources.rules.incorrect-use-ato-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.incorrect-use-ato-fn"
              },
              "fullDescription": {
                "text": "Avoid the 'ato*()' family of functions. Their use can lead to undefined\nbehavior, integer overflows, and lack of appropriate error handling. Instead\nprefer the 'strtol*()' family of functions.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Avoid the 'ato*()' family of functions. Their use can lead to undefined\nbehavior, integer overflows, and lack of appropriate error handling. Instead\nprefer the 'strtol*()' family of functions.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid the 'ato*()' family of functions. Their use can lead to undefined\nbehavior, integer overflows, and lack of appropriate error handling. Instead\nprefer the 'strtol*()' family of functions.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/q/38393162](https://stackoverflow.com/q/38393162)\n - [https://stackoverflow.com/q/14176123](https://stackoverflow.com/q/14176123)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.incorrect-use-ato-fn"
                ]
              }
            },
            {
              "id": "d0c8bd78-de79-32f9-8fc9-af27b5011552",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "b1106e1c-fc70-34c7-9ef1-f9a4d98a2f4b",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "623ebcc1-89e5-3cf4-b25d-fc65512f8e11",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ed680855-6924-32e5-8699-39538582221c",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "0191fdef-1a8b-3b41-a28f-97ce0ec76443",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "74ae616b-bf63-32cd-ad41-c4869ecbc624",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "d7728016-efca-326f-b727-f3786ad65013",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "b4a0398b-3f63-3ec9-a56d-8d3699d10640",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "5c6b52bb-94f9-3ffb-b297-8845ef252845",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "218c2ad8-d009-3f89-87ef-17dbf4a2f801",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "832955ab-0f38-32ae-afb3-bacee7a1578c",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "70a08d22-9f18-3bf7-8ba1-d564628f32a9",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "83245649-babf-3e88-9988-851e81356656",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "248631fa-4bbf-317e-bd3c-8e8e5f53c4b1",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "310a7ff7-400f-3115-ae69-821eb890f958",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "bf66f4d5-c1b1-30d6-8280-11aafc271ab0",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "38d83d55-5b63-3d4b-8806-aaeb2e6f551f",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "8d9bdc16-c5bb-31b4-b33e-9f43dfa23c03",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "f674d653-83a1-38b6-9f9e-2e5780f34346",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "6bbed03b-aa67-333c-955a-4c44ff9ba1b2",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "af0f17bc-e020-3ee0-a1f6-c8fe0c64588d",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "03412de7-9731-3c14-bbf8-990f2443eda3",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "f82ca54d-4f70-35d5-a517-b8c7c9414333",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "6d86d3b1-6b82-32c4-a128-9fdbcc96b83b",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "5dcac3d0-22c5-3643-aa12-f819b03370ca",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "755efbd5-24ce-304d-90fe-e74f45790187",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "296dd669-c86b-3eee-a6ab-4ce1fef82a68",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "6fc26988-b127-350e-9ee5-166969a12e5f",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "4fff5ab7-9812-3840-ba33-c51528e47cd2",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "a72ab24e-5171-3149-aba6-1dd21cf4d69d",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "86fff8a0-1ce6-36b0-a6dc-580c5ee879be",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "ba15aa3b-ebc9-3462-bd74-1292cc0f5dd2",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "719c5953-de2e-3c00-baec-82605234197d",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "0e416ced-0837-3c3f-bd87-670427f51c5a",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "b5fdd673-25bf-3788-a0ab-0837bbc8fde4",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "fe3ca2d2-f57f-38ac-a0e1-bb551ea59d09",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "f938a037-8dba-3333-bcf4-eb2214e57438",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "a80c1786-bf9e-3c38-8dc1-084a6346aa65",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "97781a9d-bd4a-3f7d-8557-f36e1639a7a7",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "14bce7cc-52ba-3a13-bc57-a9bc40bf2423",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "7af63c6d-2026-36e8-bc72-e16b91946059",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "528e5aa0-da1a-31d0-9dba-6dc047d8f052",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "16ea9673-56e4-3886-bf6a-b95c0fc8aa1f",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "837274d0-1858-3578-b76b-3cda0b4734f8",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "20c0e5d3-a356-3c00-9ff7-8fd5003c3c30",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "8b5397c1-410a-3ed7-83d4-c3b3df3a4cf9",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "43b86d86-c5dd-346e-aa25-f21549a9ec47",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "56f38581-d2e4-3e1b-adcf-a05f1d3b4823",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "4fc2ced2-dc29-3058-b628-22a874ecbb40",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "65dca02f-7f87-35ae-b622-aa9df6c38137",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "89f9ac47-301d-3ca5-94ef-79456f681600",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "5202a9d9-7c75-3ca6-a13a-20ce094996a0",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "3a5dcc39-2725-3538-aa83-64d2b1a908ef",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "cbd3377f-ebe5-3c51-8857-69cf2c8d2098",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ece7b73f-5a5f-3a9d-a2d8-83525dba7860",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "88f2ab9a-038d-32db-8853-90b29d20ed8a",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "ebc03818-127e-3544-97bb-f06b7bf83fd4",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "de6a4fc8-2d41-35be-b93f-5867bf4c2e90",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "4ce0f957-be35-3593-a790-575a3459444b",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "5bae0a20-92ad-35e5-ad46-18aa574724d9",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "07482827-7610-3d91-ad50-2e43263ddeb7",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "81acb1fd-601f-3aca-ae4f-766f3856c4c1",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "c6d85a55-7a35-30b8-9dc2-5bc04e9a35c7",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "6d7e150c-eb06-36a7-a290-a2ca22f3be2b",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "7d7ed61f-5fa9-3304-8a8f-fb028e75eb1c",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "e602a492-6ec4-3f4e-af0c-2e1c0a157b9c",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "818820d0-983b-36a0-8611-b807ba237a11",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "a38e5f1c-bd4e-349c-ad67-9a0651310a5b",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "022b865b-aa2e-3a13-842c-65318e56f025",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "220d0299-771c-320c-bc39-65dd2140849e",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "2696be41-a52f-3934-8cd6-0196ce616b36",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "1dbd8abd-13bb-3c9a-a3a2-f50e6527885f",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "426d2f16-6c69-34d1-9f46-78807d5ddb47",
              "name": "resources.rules.raptor-insecure-api-alloca",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-alloca"
              },
              "fullDescription": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-alloca"
                ]
              }
            },
            {
              "id": "a67112e2-233c-3234-8c1c-491fe202838b",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "818459fb-b74f-3630-bf8b-8d61dcbb2915",
              "name": "resources.rules.raptor-insecure-api-access-stat-lstat",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-access-stat-lstat"
              },
              "fullDescription": {
                "text": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/367](https://cwe.mitre.org/data/definitions/367)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-access-stat-lstat"
                ]
              }
            },
            {
              "id": "bd6536f5-8713-3646-b64c-4335ea1a9935",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "766fcf05-6a28-343e-9708-83232145b6b3",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ad2af9d5-f973-3b16-ac8d-006e748e87fe",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "149e64d3-06a6-368e-91c3-fe026d755cc8",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "15e41cb6-93d8-389b-ba31-abfc5e3a77be",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "8f5d887e-637c-31c0-a469-184ae073d830",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "96e82e3a-11c2-374c-8de2-fff49725cb6e",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "e62b9f9c-2770-3178-9002-670bedb25c41",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ffbfa2cc-5d4e-325f-ac3f-27fa6d7cf6a1",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "7be7c59b-ee00-32aa-a3c9-613ca28a8b50",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "92718cf5-185f-31b0-bcb5-7f1fb93bb921",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "90439203-e9d4-343a-86c7-ed1fb4ad95ed",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "6ac1cfae-a3a0-3143-a916-372154e82281",
              "name": "resources.rules.raptor-interesting-api-calls",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-interesting-api-calls"
              },
              "fullDescription": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-interesting-api-calls"
                ]
              }
            },
            {
              "id": "506f1bbe-f387-30e5-9fe6-3853426d5118",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "cf52acf8-f363-3109-81db-dcac2b17946b",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ae147755-4003-3efc-b14a-32fefa980e26",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "06d925c3-f1cf-39a9-9c2b-20d1f18a40be",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "67e44360-d1a5-3daa-8c6e-328ccdac3ab4",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "37edd5b1-30a9-3713-92be-33f49ab7354e",
              "name": "resources.rules.raptor-insecure-api-signal",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-signal"
              },
              "fullDescription": {
                "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/364](https://cwe.mitre.org/data/definitions/364)\n - [https://cwe.mitre.org/data/definitions/479](https://cwe.mitre.org/data/definitions/479)\n - [https://cwe.mitre.org/data/definitions/828](https://cwe.mitre.org/data/definitions/828)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-signal"
                ]
              }
            },
            {
              "id": "fd41eb2e-1030-38bc-aede-79ee61adfb05",
              "name": "resources.rules.raptor-insecure-api-signal",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-signal"
              },
              "fullDescription": {
                "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/364](https://cwe.mitre.org/data/definitions/364)\n - [https://cwe.mitre.org/data/definitions/479](https://cwe.mitre.org/data/definitions/479)\n - [https://cwe.mitre.org/data/definitions/828](https://cwe.mitre.org/data/definitions/828)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-signal"
                ]
              }
            },
            {
              "id": "ba0d7b5c-42aa-3e78-bc8a-8cf052208b16",
              "name": "resources.rules.raptor-insecure-api-signal",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-signal"
              },
              "fullDescription": {
                "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/364](https://cwe.mitre.org/data/definitions/364)\n - [https://cwe.mitre.org/data/definitions/479](https://cwe.mitre.org/data/definitions/479)\n - [https://cwe.mitre.org/data/definitions/828](https://cwe.mitre.org/data/definitions/828)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-signal"
                ]
              }
            },
            {
              "id": "ec5b9225-5294-3d60-9ab6-2d4c34e6bdbd",
              "name": "resources.rules.raptor-insecure-api-signal",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-signal"
              },
              "fullDescription": {
                "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/364](https://cwe.mitre.org/data/definitions/364)\n - [https://cwe.mitre.org/data/definitions/479](https://cwe.mitre.org/data/definitions/479)\n - [https://cwe.mitre.org/data/definitions/828](https://cwe.mitre.org/data/definitions/828)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-signal"
                ]
              }
            },
            {
              "id": "6a20af19-b586-371c-857e-86e4297707cf",
              "name": "resources.rules.raptor-insecure-api-signal",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-insecure-api-signal"
              },
              "fullDescription": {
                "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/364](https://cwe.mitre.org/data/definitions/364)\n - [https://cwe.mitre.org/data/definitions/479](https://cwe.mitre.org/data/definitions/479)\n - [https://cwe.mitre.org/data/definitions/828](https://cwe.mitre.org/data/definitions/828)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-insecure-api-signal"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "952b4aca-224f-37f6-83e9-1d8d8dc8e067",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.QA",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 19,
                  "snippet": {
                    "text": "RUN apt-get update && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e6e17bd16f6be33f44d05cee1a6bdd8f93f29a62e7dac9bffda2021f4c134111510e00a6fe9ed7a32c80096512068611fe48e76d0444bbaba421481a48dd65c7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c7767672-2bce-34b7-924d-3e5466f68681",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.QA",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 1,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "RUN apt update && apt install -y gpg wget && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "96ed89ea5b174fbb58180bbdc2cf827769657598abad7d93bbbc7be8f3ca525913b66bdbee1999379d7d064ffc2100af196e91c705ed807031c1121eb38791f0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "502a941e-2e68-375e-8049-c4f1465f9b8b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip3 install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.QA",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 27,
                  "snippet": {
                    "text": "RUN pip3 install --upgrade pip && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "44bb3c5e2127f3aae5d3d3ead3811cda9e2fa4e5985d223dcb9a1dab9eb92f93fe73a12722b2c11abdc9ff4e608bb33898229a0c55fe3df002113b023869781e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "91ea276c-c5f9-3e0f-bcf6-96e19dcdd253",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.QA",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 1,
                  "endLine": 80,
                  "endColumn": 8,
                  "snippet": {
                    "text": "RUN mkdir -p inception_graphdef/1 && \\\n    wget -O ${TRITONTMP_DIR}/inception_v3_2016_08_28_frozen.pb.tar.gz \\\n        https://storage.googleapis.com/download.tensorflow.org/models/inception_v3_2016_08_28_frozen.pb.tar.gz && \\\n    (cd ${TRITONTMP_DIR} && tar xzf inception_v3_2016_08_28_frozen.pb.tar.gz) && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "61c29d3f75c74afebfb648be902c65f35d31ee3a292aa9c5315fbb8871fe36c9bc03b0371e5b4706323c68accb9feccc54c557d13024724c9b2009cbbe100e69_0"
          },
          "properties": {}
        },
        {
          "ruleId": "55c5383e-dd8d-3f77-b262-827c892a07e5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.QA",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 1,
                  "endLine": 191,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN cd tritonbuild/python && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "61c29d3f75c74afebfb648be902c65f35d31ee3a292aa9c5315fbb8871fe36c9bc03b0371e5b4706323c68accb9feccc54c557d13024724c9b2009cbbe100e69_2"
          },
          "properties": {}
        },
        {
          "ruleId": "3b7023bd-fe2c-3646-8a29-0f13903537e2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.QA",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 1,
                  "endLine": 180,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN cd tritonbuild/identity && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "61c29d3f75c74afebfb648be902c65f35d31ee3a292aa9c5315fbb8871fe36c9bc03b0371e5b4706323c68accb9feccc54c557d13024724c9b2009cbbe100e69_1"
          },
          "properties": {}
        },
        {
          "ruleId": "20a70086-887a-307d-9d85-bb6892ff8b3f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.QA",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 1,
                  "endLine": 307,
                  "endColumn": 38,
                  "snippet": {
                    "text": "RUN if [ $(cat /etc/os-release | grep 'VERSION_ID=\"20.04\"' | wc -l) -ne 0 ]; then \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0ba5972d39137be21351a674904985b558b07ac59b8f1f07b63aed57f6db934794e51d4a1ee51a201be6fd9d9c6567973d22e0b933b17a9a2a959ae58b9f9d8e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4148a66a-d6b3-35bc-ae5c-8a8f2ceb79bf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.QA",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 1,
                  "endLine": 326,
                  "endColumn": 19,
                  "snippet": {
                    "text": "RUN apt-get update && apt-get install -y --no-install-recommends \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e6e17bd16f6be33f44d05cee1a6bdd8f93f29a62e7dac9bffda2021f4c134111510e00a6fe9ed7a32c80096512068611fe48e76d0444bbaba421481a48dd65c7_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f73eedac-69b6-31dd-bab0-bec62c9081b0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip3 install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.QA",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 1,
                  "endLine": 350,
                  "endColumn": 27,
                  "snippet": {
                    "text": "RUN pip3 install --upgrade wheel setuptools && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "44bb3c5e2127f3aae5d3d3ead3811cda9e2fa4e5985d223dcb9a1dab9eb92f93fe73a12722b2c11abdc9ff4e608bb33898229a0c55fe3df002113b023869781e_1"
          },
          "properties": {}
        },
        {
          "ruleId": "a660243f-7561-32c8-b2ed-347b72f79cc1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.sdk",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 19,
                  "snippet": {
                    "text": "RUN apt-get update && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f933010afd054afabcaff081bce21456e7dec614875f8a7971823e491f2063dd3ea52868c7df7ec9fab17f1d78f9adf79467c9daee40a9b1d22909ca00a0e02d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "609b30b5-4128-3068-812e-2b4ddda690cb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.sdk",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 1,
                  "endLine": 91,
                  "endColumn": 8,
                  "snippet": {
                    "text": "RUN apt update && apt install -y gpg wget && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "af84434c424fe11d45f49fe9cbefe80cc95ed0b046b8b368ef15c70629a3b52615aa9080ce01e853a54568dd1c161ab5b233cdeca3ba0e746c179aab6cb3d62f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d29ec938-7c73-36f3-8176-25d9e1c05ea5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.sdk",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 1,
                  "endLine": 162,
                  "endColumn": 19,
                  "snippet": {
                    "text": "RUN apt-get update && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f933010afd054afabcaff081bce21456e7dec614875f8a7971823e491f2063dd3ea52868c7df7ec9fab17f1d78f9adf79467c9daee40a9b1d22909ca00a0e02d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "aaa8b147-2943-3b9c-bedd-6d8950d7e455",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.sdk",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 1,
                  "endLine": 191,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN cd install && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b6baa7dc7bd2e48d1735c09c870134683e5f3b32672edf9504ce7da3b7ffb65c63feac0eda1a5f5e3af429c0dea154b06554f90481d5f7ce9c97ae5c244dd45a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "021c2953-e279-32b7-90f5-7d1bed159a78",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.win10.min",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 87,
                  "snippet": {
                    "text": "RUN setx PATH \"c:\\CMake\\bin;%PATH%\"\n\nENV CMAKE_TOOLCHAIN_FILE /vcpkg/scripts/buildsystems/vcpkg.cmake\nENV VCPKG_TARGET_TRIPLET x64-windows\n\nLABEL CMAKE_VERSION=${CMAKE_VERSION}\n\n# Be aware that pip can interact badly with VS cmd shell so need to pip install before"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7d2d508b94e546c004f3fbf13dc81d17c5eedd1dfcf9e9e502e99474e3d918ec8aa7d5b928040156626745f9c94c6399ed5fb7d19407eb995c4e88cda7edd506_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8a07e63b-e18e-3f97-a05e-9923217d7c00",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.win10.min",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 1,
                  "endLine": 49,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD ${CMAKE_SOURCE} ${CMAKE_FILE}.zip"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ba8da6f5abfd03d05b88be1fde1d6aea2d29e227c2dd7809581dc82c7d38358caa1d11baab3313a670b5ba1382a7bf29451214aea8bbf7397d6afc2a8301a70a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fbef83a8-4445-31dd-b1f6-0e0f2bf72d97",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip3 install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.sdk",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 1,
                  "endLine": 231,
                  "endColumn": 22,
                  "snippet": {
                    "text": "RUN pip3 install \"git+${TRITON_MODEL_ANALYZER_REPO}\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e41179230fc039185af4f6feec2c98d4fc4c67706214f6b73374cafecb6290e79069fa28288beffabe0d37c5044d10aa25c918915d67c4d75c35d7bcb29a71a8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "abb57fb8-2e29-3c58-b262-c43a001af06b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.win10.min",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 1,
                  "endLine": 66,
                  "endColumn": 26,
                  "snippet": {
                    "text": "RUN pip install --upgrade wheel setuptools docker"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "db9525c63200f2fe65a0f3dcd50f54a87d72d70148913d2a62ac9dd0457b4d77f6cb01b1aabb2a592da34b0cbe23814b08711613ce0219d20bf904d92e29707b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a3093918-f5f0-3532-b294-5a30499775ef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.win10.min",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 1,
                  "endLine": 63,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD ${PYTHON_SOURCE} python-${PYTHON_VERSION}-amd64.exe"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ba8da6f5abfd03d05b88be1fde1d6aea2d29e227c2dd7809581dc82c7d38358caa1d11baab3313a670b5ba1382a7bf29451214aea8bbf7397d6afc2a8301a70a_1"
          },
          "properties": {}
        },
        {
          "ruleId": "b0c185cb-7d9c-362c-9ae5-f8d5b79735ea",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.win10.min",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 1,
                  "endLine": 67,
                  "endColumn": 23,
                  "snippet": {
                    "text": "RUN pip install grpcio-tools"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "537b4eb3b718163a0db848b6000daab9a9ff9d5370715f9804b23d64743c673e4626d9c81a2a8b529085b09611670c9d21a018695200949bfb8b4edae42f5c1e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f658f5d4-fb19-390f-9939-02f2356ba6c1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.win10.min",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 1,
                  "endLine": 76,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD https://aka.ms/vscollect.exe \"C:\\tmp\\collect.exe\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ba8da6f5abfd03d05b88be1fde1d6aea2d29e227c2dd7809581dc82c7d38358caa1d11baab3313a670b5ba1382a7bf29451214aea8bbf7397d6afc2a8301a70a_2"
          },
          "properties": {}
        },
        {
          "ruleId": "65252285-1d49-367f-af9c-247db1902cb7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.win10.min",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 80,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD ${CHANNEL_URL} \"C:\\tmp\\VisualStudio.chman\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ba8da6f5abfd03d05b88be1fde1d6aea2d29e227c2dd7809581dc82c7d38358caa1d11baab3313a670b5ba1382a7bf29451214aea8bbf7397d6afc2a8301a70a_3"
          },
          "properties": {}
        },
        {
          "ruleId": "48692327-a2cd-34c4-8d39-25b7c3f20855",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.win10.min",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 1,
                  "endLine": 83,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD ${BUILD_TOOLS_SOURCE} vs_buildtools.exe"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ba8da6f5abfd03d05b88be1fde1d6aea2d29e227c2dd7809581dc82c7d38358caa1d11baab3313a670b5ba1382a7bf29451214aea8bbf7397d6afc2a8301a70a_4"
          },
          "properties": {}
        },
        {
          "ruleId": "99f80bbe-ee51-38e4-a01c-e261a8d41e09",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build-vllm-docker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 73,
                  "endLine": 95,
                  "endColumn": 74,
                  "snippet": {
                    "text": "THIS_SCRIPT_DIR = os.path.dirname(os.path.abspath(getsourcefile(lambda: 0)))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "860ab3877a638437f07636efbc19fca65733be0b5a15c3ddddcba928e8c7e5d5ae457f464e32ec015ef7279fa03f8170362ce30249b1cde243b4283be9b57327_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8fff90a4-61ba-3b8f-b8a9-3f81e686aa2a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build-vllm-docker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 9,
                  "endLine": 150,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        self._file = open(self._filepath, \"w\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b6ecf7d116681493a4845f963e9da7aff750a10f4780723b2add02ae8927454755413c7eda258fa0d01f088302d329b92e14c1f161f3656edb4ad3843b6c61dc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "856c15fb-fe3c-3f61-a57e-954b5a429cbf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure file permissions detected (world-writable or world-executable).\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build-vllm-docker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 38,
                  "endLine": 176,
                  "endColumn": 63,
                  "snippet": {
                    "text": "            os.chmod(self._filepath, st.st_mode | stat.S_IEXEC)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "993d45a4018b0450608d95bebd6975b13e1ede3ff0a8364cc2cc70d78532cab51635eba6b390217853b51d3f4227a6b96062655d05e3c5f021cc5d3d687666e9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c9f7bade-e576-31a2-90c1-79d4347360f0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build-vllm-docker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1389,
                  "startColumn": 20,
                  "endLine": 1389,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        response = requests.get(url)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ae9dbb671b9dfdf4aa156909352ade08e8d0c11393f7282b90c8123f7ca72ac15472e5c9693ed3c2562d43e780cfb28692933d259a93b05b68ba660a0dce9062_0"
          },
          "properties": {}
        },
        {
          "ruleId": "975ecbe8-26c6-3e01-9c3f-d6314cec764b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build-vllm-docker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1394,
                  "startColumn": 9,
                  "endLine": 1394,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        exec(response.content, fastertransformer_buildscript.__dict__)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b7565d2fcf1671be8d7dc27c7d3a60789f6ecb2929a5d9c0c1042f6e812d86d8790e339cf14507e7577b4d1133a03a1f730fd0afebb65f7e846f135561ad2e12_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f66d9173-1613-3a6a-bdcf-e2d084abbc01",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build-vllm-docker.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3062,
                  "startColumn": 17,
                  "endLine": 3062,
                  "endColumn": 76,
                  "snippet": {
                    "text": "            p = subprocess.Popen([f\"./{script_name}\"], cwd=FLAGS.build_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "accd2c28c2820b2261ddc22bed298f567b46ddc23ab619275d7adaa0bdecff7d3f2fbf3ac8965afbb4da5a4153c00e6c490b777c0a7f7a25eea92f4421b0a3a2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "129675ec-25cc-306c-9c6c-f1b51b3204d5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build-vllm-podman.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 73,
                  "endLine": 95,
                  "endColumn": 74,
                  "snippet": {
                    "text": "THIS_SCRIPT_DIR = os.path.dirname(os.path.abspath(getsourcefile(lambda: 0)))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b1fb84200032d91e2420f614815de0e94d84d9513e737bf93789c8c9f6ea531854528c693ed88f6193371d82e4e2b8602af547ee4fd52e107b126855902fc14c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2007f968-dd15-3bb4-9023-73ee027fbb9d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build-vllm-podman.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 9,
                  "endLine": 150,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        self._file = open(self._filepath, \"w\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "83b5f838a1e070deb3d41ce38e127f9081ec871133fe2fbccbecf4f684e4265853cbcf48f819f584d64581095e279100d026b3bc2217afaa90ddf6bf4ee83081_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3d646dc6-58b9-30cf-8c8e-6fb40f11628d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure file permissions detected (world-writable or world-executable).\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build-vllm-podman.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 38,
                  "endLine": 176,
                  "endColumn": 63,
                  "snippet": {
                    "text": "            os.chmod(self._filepath, st.st_mode | stat.S_IEXEC)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ea94491063a2b803783febd6db3999a14449cb44c67c7c3b0803804ec3c5e1368fa4923ef955aa3000dece9527b42ef8276ff73e017800bed016f446d5b6ac9d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0b55e07e-0a6d-3c23-95a2-650fce485cb5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build-vllm-podman.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1389,
                  "startColumn": 20,
                  "endLine": 1389,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        response = requests.get(url)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71a91ebf606f86b2c1e1f4852cc9432071c7bdfa60d189399149f90218c1540abc54e1735add0c8e9665a51080a191a1e3ffc302801e8e4c8b4c9fed3ff7f16d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bf69037c-0e39-3bcd-8694-fbba44e059ed",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.win10.min",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 1,
                  "endLine": 146,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD ${TENSORRT_SOURCE} /tmp/${TENSORRT_ZIP}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ba8da6f5abfd03d05b88be1fde1d6aea2d29e227c2dd7809581dc82c7d38358caa1d11baab3313a670b5ba1382a7bf29451214aea8bbf7397d6afc2a8301a70a_6"
          },
          "properties": {}
        },
        {
          "ruleId": "daa5eb4c-30d2-31ce-a015-9712ffc91b1a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build-vllm-podman.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1394,
                  "startColumn": 9,
                  "endLine": 1394,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        exec(response.content, fastertransformer_buildscript.__dict__)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "50c52566990614d020bb1a9fc881975e6c16e67ae49ed05081d6d33448abac535b58d6eee4431bd65eb2fbfb38b134669c18e17ec90d2ba43880838bb92d5277_0"
          },
          "properties": {}
        },
        {
          "ruleId": "530ce47d-b523-3b84-ba09-79525845b015",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.win10.min",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 1,
                  "endLine": 128,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD ${CUDA_SOURCE} cuda_${CUDA_VERSION}_windows_network.exe"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ba8da6f5abfd03d05b88be1fde1d6aea2d29e227c2dd7809581dc82c7d38358caa1d11baab3313a670b5ba1382a7bf29451214aea8bbf7397d6afc2a8301a70a_5"
          },
          "properties": {}
        },
        {
          "ruleId": "768fbb0f-c567-3255-b9ac-f121a92a3297",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build-vllm-podman.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3062,
                  "startColumn": 17,
                  "endLine": 3062,
                  "endColumn": 76,
                  "snippet": {
                    "text": "            p = subprocess.Popen([f\"./{script_name}\"], cwd=FLAGS.build_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cc52c1ae7f616ea32bbb3e006f80d22182e1d06a5ac0fd90a7c6ae872fafdf39b65f2cf0dca53ec9700e837d1f4b36741494b17a1de9b7309f0422e1140ff81e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "98bad7f3-6ee5-36e2-82a6-eb18f4453b79",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 9,
                  "endLine": 150,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        self._file = open(self._filepath, \"w\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f84039e36c98184e995de6bed51166f6164cad7caee8289637778c2cf624858e686010d64c97d3be2b4a88482540ca7d8f72ab3357ef26525245be9a26945c25_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ec14eee8-318f-339b-bb6c-4c77ade428b9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure file permissions detected (world-writable or world-executable).\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 38,
                  "endLine": 176,
                  "endColumn": 63,
                  "snippet": {
                    "text": "            os.chmod(self._filepath, st.st_mode | stat.S_IEXEC)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7e4dde0b293b8434ed7eafaed57f62399ce6807bebecd4bb7314e4462d45c0ea4324fb817c2db58213c4ed8b18d7e71da46d923b1380c619a4d5463c148fbbb0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4809309f-851f-3831-9d53-2130efa9c9cc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 73,
                  "endLine": 95,
                  "endColumn": 74,
                  "snippet": {
                    "text": "THIS_SCRIPT_DIR = os.path.dirname(os.path.abspath(getsourcefile(lambda: 0)))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cdca1f37a579c313e64579cc83cbed26abfe65742ffe00f8e18d023b0cc38b1184204c19c8fd1cf4df0837e301762384ef5963e410b50ffa626f7c14d9384fb0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "45655008-3b17-367c-a399-85cbfbef7003",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1341,
                  "startColumn": 9,
                  "endLine": 1341,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        exec(response.content, fastertransformer_buildscript.__dict__)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e4437da8e7879490fdb8d08eb28e32e56ea5890b3ad48af130a1ed6bc0649e7f93752ef4efee602764234f40a47b1b41ba881c8d4f850e87b517b821d55f94a4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b0f30782-e84f-379c-b089-c9e28cc6d5de",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1336,
                  "startColumn": 20,
                  "endLine": 1336,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        response = requests.get(url)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c89b4a3f081607415213e7370ef12579489d891cadaf58473f67d714da1dbd936933ac90180f07026e6fe9b8417780789e412854c194a534571dc5038f6f07b0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e654a273-42cf-39ce-b701-68d69a8709e3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "build.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2983,
                  "startColumn": 17,
                  "endLine": 2983,
                  "endColumn": 76,
                  "snippet": {
                    "text": "            p = subprocess.Popen([f\"./{script_name}\"], cwd=FLAGS.build_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3233e182b605c11dec683948355b14dbb5165a76d5eed5788370ef38d1e2552a5fceed883d3ccf982e7300b9f2e04ecbe4a6d542e88cc0cc329b7217c73b4021_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ae819c29-d8e3-382f-9792-01327de3bde7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "compose.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 19,
                  "endLine": 240,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        pm_path = subprocess.run(\n            base_run_args\n            + [\n                \"{{range $index, $value := .Config.Env}}{{$value}} {{end}}\",\n                min_docker_image,\n            ],\n            capture_output=True,\n            text=True,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2ef5410436f59bc8099a7563c795448050d33c4272f3fda16fa654502bab24f3c8024cc5e9d31ea6569eece587bd71d79738092f97795f20eff1e2277ed78b06_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b0a946f9-8d12-3aa6-849a-c7128c7dc181",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"CUDA_VERSION\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "compose.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 13,
                  "endLine": 249,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        e = re.search(\"CUDA_VERSION\", vars)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "345e58ea5cd659a64a0fe4b477f436f1193626f61e45dcb591663ce7cadb930e02f482724980ebb32fe4eea0ae96522a533bdd5db21e90cd70430d0552a485b8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d0a20ed7-510d-3328-a6f2-e338af5be7b1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "compose.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 14,
                  "endLine": 265,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    p_path = subprocess.run(\n        base_run_args\n        + [\n            \"{{range $index, $value := .Config.Env}}{{$value}} {{end}}\",\n            full_docker_image,\n        ],\n        capture_output=True,\n        text=True,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2ef5410436f59bc8099a7563c795448050d33c4272f3fda16fa654502bab24f3c8024cc5e9d31ea6569eece587bd71d79738092f97795f20eff1e2277ed78b06_1"
          },
          "properties": {}
        },
        {
          "ruleId": "2c9eac96-3f34-3640-a405-9563f7bae29f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"TRITON_SERVER_GPU_ENABLED=([\\S]{1,}) \"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "compose.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 10,
                  "endLine": 275,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    e0 = re.search(\"TRITON_SERVER_GPU_ENABLED=([\\S]{1,}) \", vars)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bd4e8421657bac648a3a0af97cd518a6f4184d07d1120826be041b35cb769b7a6de3c9f71080716216329d608e068deb4b865bc3bdd538122501fd4225eba12d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cb5ac758-882a-3704-a85c-2c1fd7e77e03",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"CUDA_VERSION\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "compose.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 10,
                  "endLine": 276,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    e1 = re.search(\"CUDA_VERSION\", vars)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "345e58ea5cd659a64a0fe4b477f436f1193626f61e45dcb591663ce7cadb930e02f482724980ebb32fe4eea0ae96522a533bdd5db21e90cd70430d0552a485b8_1"
          },
          "properties": {}
        },
        {
          "ruleId": "3971c184-667b-37df-8036-63206ad27a3c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"TRITON_SERVER_VERSION=([\\S]{6,}) \"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "compose.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 9,
                  "endLine": 288,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    e = re.search(\"TRITON_SERVER_VERSION=([\\S]{6,}) \", vars)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "618010f3498fa868fae5af73e65111fd6af762712831b470de8b1048cf658aa10f0ce498fb0bdc9fc65d84e9d1f282a7d317d6ad56fca4fbfc80214d1fd138b1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2c29f7ee-7ed2-3a88-9988-1fd588103155",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"NVIDIA_TRITON_SERVER_VERSION=([\\S]{5,}) \"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "compose.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 9,
                  "endLine": 294,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    e = re.search(\"NVIDIA_TRITON_SERVER_VERSION=([\\S]{5,}) \", vars)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "597dff517911ff9c8317aa9ad668c89e520d7d0c209ae06772f149eb1fbf44d8f0e94301eafc7c1394d6956cfe7dfcd3a6977f3ffe962af844fd669bfea5c0d5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "afd6f0c6-1b51-3b75-9aec-c94a44809051",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"DCGM_VERSION=([\\S]{4,}) \"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "compose.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 16,
                  "endLine": 300,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    dcgm_ver = re.search(\"DCGM_VERSION=([\\S]{4,}) \", vars)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "99453fd0b606e7b982d63b0d87e181b456680f8e4188923a8fc290201ebb69f6e147dfc04d18a8421edb7f18dbe520b57316bb00da6ae5ab7aa29385f9889ada_0"
          },
          "properties": {}
        },
        {
          "ruleId": "302933e5-d299-3f6c-8e87-95a0cde686e7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "compose.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 15,
                  "endLine": 333,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    p_build = subprocess.run(\n        base_run_args\n        + ['{{ index .Config.Labels \"com.nvidia.build.id\"}}', full_docker_image],\n        capture_output=True,\n        text=True,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2ef5410436f59bc8099a7563c795448050d33c4272f3fda16fa654502bab24f3c8024cc5e9d31ea6569eece587bd71d79738092f97795f20eff1e2277ed78b06_3"
          },
          "properties": {}
        },
        {
          "ruleId": "53106b2a-e9c6-3572-8e6a-3f367346f6d7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"serve\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "compose.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 9,
                  "endLine": 346,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    f = re.search(\"serve\", p_find.stdout)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b99c85217eea0f2b64df63276577920c374ed7e7b8c200c1ceed7e7835285ddfb12852f3eb10af0661d6fbfb8728c6143b9930ebc50b3cf7d114acfe4c9a0698_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a56cd23f-23f0-3197-ac0a-e1f34c88dc97",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "compose.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 13,
                  "endLine": 321,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    p_sha = subprocess.run(\n        base_run_args\n        + ['{{ index .Config.Labels \"com.nvidia.build.ref\"}}', full_docker_image],\n        capture_output=True,\n        text=True,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2ef5410436f59bc8099a7563c795448050d33c4272f3fda16fa654502bab24f3c8024cc5e9d31ea6569eece587bd71d79738092f97795f20eff1e2277ed78b06_2"
          },
          "properties": {}
        },
        {
          "ruleId": "88296e97-25ef-3d6b-ad53-10be07eaec40",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "compose.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 24,
                  "endLine": 412,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        type=lambda x: (str(x).lower() == \"true\"),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "57521ff6614b63cf8bda6e23ad800a6617cc59b483969d927e19a07053ebce235727e68aab5604a0123b4ced52b3041749716d1343c30d1017628ccb2282ec3d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "251b2516-15cf-348f-805e-a705ee3bd978",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile.win10.min",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 1,
                  "endLine": 164,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD ${CUDNN_SOURCE} /tmp/${CUDNN_ZIP}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ba8da6f5abfd03d05b88be1fde1d6aea2d29e227c2dd7809581dc82c7d38358caa1d11baab3313a670b5ba1382a7bf29451214aea8bbf7397d6afc2a8301a70a_7"
          },
          "properties": {}
        },
        {
          "ruleId": "0b9e97ba-a76e-3bcd-ab49-4cc31d2fe9aa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deploy/gke-marketplace-app/server-deployer/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 9,
                  "snippet": {
                    "text": "FROM gcr.io/cloud-marketplace-tools/k8s/deployer_helm/onbuild"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "932755807372a156794bcbb4b423bf6e834a834f340acbea314a0583466deede707a6e7dcbf9c6d15313b0db6165c704941103f8174aa87a6914c04fbfea1a0a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9473cd98-2da8-3e0f-845d-dac7f3068235",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deploy/gke-marketplace-app/benchmark/perf-analyzer-script/triton_client.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "spec:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6cb9d14e7e43b1be8e5163e518d43d2abd4d24c529d4062f1ee70a5d6ea4db3c64023e038af925e48e35f365311d705c1329ac8881b471f9dde5c3261093b697_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ae5bcf75-cce9-3625-8ce0-fd93766ab12f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deploy/gke-marketplace-app/server-deployer/chart/triton/templates/deployment.yaml",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 5,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    spec:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6154114ef3569334704f2f7be835ea23ab335c1e23a0d72d1afb5b5de9ac6eaecca931cd1cb4faf17076bc2693eff6db7b2f1bd39b95ffe632e1a2fe81a48ce4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "758e3ce2-6379-38c1-88c6-a479bfe27bd6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"s3://(http://|https://|)([0-9a-zA-Z\\\\-.]+):([0-9]+)/\"\n                \"([0-9a-z.\\\\-]+)(((/[0-9a-zA-Z.\\\\-_]+)*)?)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "deploy/mlflow-triton-plugin/mlflow_triton/config.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 29,
                  "endLine": 45,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            self.s3_regex = re.compile(\n                \"s3://(http://|https://|)([0-9a-zA-Z\\\\-.]+):([0-9]+)/\"\n                \"([0-9a-z.\\\\-]+)(((/[0-9a-zA-Z.\\\\-_]+)*)?)\"\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8cb11694bd08c8fa50d2c3c7652d9733c551170a425dd7b496468fe44baf9c0f5e0e016487b109a6d1804fab86efaeb5ac636334531b51953d0d84b53c5a58f2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "efedc1e5-dcf6-3396-87a9-70ba1381737a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_identity/identity_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "endLine": 69,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "81b20918c9617daf141c3a73c972ca77aa47daf1e750dad440cb297a3919b9811e1da1a1dbb32579a27df7ed03533ce438c45c02bec3d6ec248fa66e96258e25_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cf9bec01-f98a-3b9a-9dbc-fb6a5120af7e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_identity/identity_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 23,
                  "endLine": 136,
                  "endColumn": 67,
                  "snippet": {
                    "text": "            metrics = httpreq.get(\"http://localhost:8002/metrics\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7abbb9c8a966bc0ebf8e6d95902c8a21a7b2b264206924f225697c4d80f2f420d30c1ba07fd3a7c329c50d91dfe599544a148239d08ce7f7a227e10f717acbc2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3c5295c7-d89b-3fe6-8606-60ff9de68eeb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS=\",\" read -a my_array'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_identity/test.sh",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 14,
                  "endLine": 84,
                  "endColumn": 21,
                  "snippet": {
                    "text": "OLDIFS=$IFS; IFS=','"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "52475dbed3f420dfca9cbba27f6aac76bc94e8c2ca72cacb7e0c56186586d41cbf68b7187873fbc7468f9d856ccb5e1c010d6547600a242c9b6223614580a698_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1584fd45-d149-30f6-9ec7-d34f40837f3a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS=\",\" read -a my_array'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_identity/test.sh",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 1,
                  "endLine": 98,
                  "endColumn": 12,
                  "snippet": {
                    "text": "IFS=$OLDIFS"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "52475dbed3f420dfca9cbba27f6aac76bc94e8c2ca72cacb7e0c56186586d41cbf68b7187873fbc7468f9d856ccb5e1c010d6547600a242c9b6223614580a698_1"
          },
          "properties": {}
        },
        {
          "ruleId": "9a2c6b0b-7b6c-3557-8b6d-b68c0438dfee",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_python/decoupled/decoupled_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(4)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "023dcf2bf830c09cb2920c8337f5d014552534de64b261062d7da632ceacfe1ba5abb3c729d33f37078bce2c3813242fb60fea5fde55d6223686c3cf2be09be1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f8365e5c-7537-35b4-ba68-de1326f91b20",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_python/decoupled/decoupled_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 13,
                  "endLine": 276,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # model delay for decoupling request and response sender"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d79a77f683be3d591a3d28abe5d6b60ef79a9eb7c7c14b8e519adc0f925c0fed0da33263b5891bcfc37cd98bb3d7f55ab4c780de307024025f040e8605412a9b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a14291e2-9070-3fb2-b241-659f5d582609",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_python/decoupled/decoupled_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 13,
                  "endLine": 277,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure the request is executing"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d79a77f683be3d591a3d28abe5d6b60ef79a9eb7c7c14b8e519adc0f925c0fed0da33263b5891bcfc37cd98bb3d7f55ab4c780de307024025f040e8605412a9b_1"
          },
          "properties": {}
        },
        {
          "ruleId": "b4b1f849-f1ed-3d10-bfbf-5160556183af",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_python/decoupled/decoupled_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 13,
                  "endLine": 279,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure the cancellation is delivered"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d79a77f683be3d591a3d28abe5d6b60ef79a9eb7c7c14b8e519adc0f925c0fed0da33263b5891bcfc37cd98bb3d7f55ab4c780de307024025f040e8605412a9b_2"
          },
          "properties": {}
        },
        {
          "ruleId": "1c1f1db8-8786-368f-a567-eff4da3d2741",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_python/decoupled/models/decoupled_bls/1/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 9,
                  "endLine": 256,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "260dc37e8e7e3730157469df50eb621efa892277209881b28df593645fbbaf7d05502eae876e42f6f5727af6325648708d049feb67c63fdbf0e00498582068bd_0"
          },
          "properties": {}
        },
        {
          "ruleId": "029104f2-1f47-323b-abb3-df176cd70258",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_python/decoupled/models/decoupled_bls_stream/1/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 17,
                  "endLine": 132,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                time.sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3f1725ad3e86b02b8495a278c20838e4caa1ec9c2b6d1fca257fd08afadfae83fabad76df701e73dd48e3a4627368328668ed18c8c7187fb20769432833d59ef_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a0b83f28-300a-3bbd-b9d3-0d5f140cea7c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_python/decoupled/models/decoupled_bls/1/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 17,
                  "endLine": 314,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                time.sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3c384fbdf0dd30b6ca25b8dabdcecb7fd46516c1b304a76873dec7304937b93d0b880d1ca6cd074de5f573af28a6a2ffbe7baf42a8c04399b174bcdde369171e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e9186333-b2a2-3dc1-93a7-15edf7eb7f8e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_python/decoupled/models/decoupled_execute_error/1/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 17,
                  "endLine": 123,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                time.sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "896c3843d11090d73978af188ee1a3c191dbce0673ce12230671e468ae7ed43ffd3077b0f69eecd83b702633c16ab19a910a46d5f9d69328756e5f971ed0d6c4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fe4bd58a-4cbf-379b-a531-0206c95c535d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_python/lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 17,
                  "endLine": 118,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(2)  # ensure the request is executing"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f8b3e021fcb6c2b00814f05fd6e748bcf1bf5d332da96002bc27c00fed594f2d40406112089e72c51a0c064708f22c36f755d55415e26fa1fbaa420c66b75469_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f396f5ef-bed1-3331-8741-115b5e9ee9ab",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_python/lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 17,
                  "endLine": 121,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(2)  # ensure the cancellation is delivered"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f8b3e021fcb6c2b00814f05fd6e748bcf1bf5d332da96002bc27c00fed594f2d40406112089e72c51a0c064708f22c36f755d55415e26fa1fbaa420c66b75469_1"
          },
          "properties": {}
        },
        {
          "ruleId": "3a71f274-f4e4-3312-8b16-b68df54933ee",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_backend_python/python_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 27,
                  "endLine": 287,
                  "endColumn": 71,
                  "snippet": {
                    "text": "                metrics = httpreq.get(\"http://localhost:8002/metrics\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "76a2fdc046b0a4678378d087402405fa6c51e9dd6c4625a89b1d4626ad0183e3afd3e9d213b3c506ecf144f3f6ef957d0586bc00cac99017667375008135abe6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "457d498f-ddd1-3d7d-8baa-a0cc82b6863d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batch_custom/batch_custom_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 13,
                  "endLine": 160,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b4f8bb1cffb779d3347a9beaf5e7bb95757e3ac801051eb37e8b9f8961ec95f1561036967663bb878a95afe02377bce730da30c5466a3387f7f54a2cb1856f8b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "14ae83eb-d139-32fe-a6af-a511c6399b35",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batcher/batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 13,
                  "endLine": 238,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "89f38371433ef096e1f08ded5f8ab2eff477452fb5fa974e45a97c13ff2f914661978a3dbca01c0037638a88c8b8f1c73af3a2f514e181b2c503d0dbabd1542f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "14b64260-b5e0-3188-9a24-7fb24cf3fe66",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batcher/batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 17,
                  "endLine": 504,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "89f38371433ef096e1f08ded5f8ab2eff477452fb5fa974e45a97c13ff2f914661978a3dbca01c0037638a88c8b8f1c73af3a2f514e181b2c503d0dbabd1542f_1"
          },
          "properties": {}
        },
        {
          "ruleId": "9f616630-70ea-32e4-b489-5707e4f00512",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batcher/batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 17,
                  "endLine": 566,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "89f38371433ef096e1f08ded5f8ab2eff477452fb5fa974e45a97c13ff2f914661978a3dbca01c0037638a88c8b8f1c73af3a2f514e181b2c503d0dbabd1542f_2"
          },
          "properties": {}
        },
        {
          "ruleId": "eda122da-7d3d-3886-b54d-f020d9e40156",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batcher/batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 639,
                  "startColumn": 17,
                  "endLine": 639,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "89f38371433ef096e1f08ded5f8ab2eff477452fb5fa974e45a97c13ff2f914661978a3dbca01c0037638a88c8b8f1c73af3a2f514e181b2c503d0dbabd1542f_3"
          },
          "properties": {}
        },
        {
          "ruleId": "fef3702d-62fe-3fd3-80e2-1d7fd508d452",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batcher/batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 724,
                  "startColumn": 17,
                  "endLine": 724,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "89f38371433ef096e1f08ded5f8ab2eff477452fb5fa974e45a97c13ff2f914661978a3dbca01c0037638a88c8b8f1c73af3a2f514e181b2c503d0dbabd1542f_4"
          },
          "properties": {}
        },
        {
          "ruleId": "b2a77edb-e2f2-3e07-bad5-3b9177118659",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batcher/batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 779,
                  "startColumn": 17,
                  "endLine": 779,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "89f38371433ef096e1f08ded5f8ab2eff477452fb5fa974e45a97c13ff2f914661978a3dbca01c0037638a88c8b8f1c73af3a2f514e181b2c503d0dbabd1542f_5"
          },
          "properties": {}
        },
        {
          "ruleId": "0865c57e-dd4e-3ba4-ab3c-f913fa5e92ed",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batcher/batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 840,
                  "startColumn": 17,
                  "endLine": 840,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "89f38371433ef096e1f08ded5f8ab2eff477452fb5fa974e45a97c13ff2f914661978a3dbca01c0037638a88c8b8f1c73af3a2f514e181b2c503d0dbabd1542f_6"
          },
          "properties": {}
        },
        {
          "ruleId": "3f8b5372-f756-397d-a33c-89baa2450d15",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batcher/batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1117,
                  "startColumn": 17,
                  "endLine": 1117,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "89f38371433ef096e1f08ded5f8ab2eff477452fb5fa974e45a97c13ff2f914661978a3dbca01c0037638a88c8b8f1c73af3a2f514e181b2c503d0dbabd1542f_7"
          },
          "properties": {}
        },
        {
          "ruleId": "d848c56f-e629-3488-b5ee-0c4d7efa5acc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batcher/batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1201,
                  "startColumn": 17,
                  "endLine": 1201,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                time.sleep(11)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "29903e0fd4fc5ff3a9500d951a14a8e78bc1e9633e20c6d60e751b6852db515bc9253241930ae07dee20cb233f43f2147f693f87bbae17acf52138494d45b4d4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2188f820-eaf7-3139-b1f8-36b5f0f9fecc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batcher/batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1291,
                  "startColumn": 17,
                  "endLine": 1291,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "89f38371433ef096e1f08ded5f8ab2eff477452fb5fa974e45a97c13ff2f914661978a3dbca01c0037638a88c8b8f1c73af3a2f514e181b2c503d0dbabd1542f_8"
          },
          "properties": {}
        },
        {
          "ruleId": "97285c0c-39bd-33da-b6a3-9c245ee6a4d0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batcher/batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1477,
                  "startColumn": 17,
                  "endLine": 1477,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "89f38371433ef096e1f08ded5f8ab2eff477452fb5fa974e45a97c13ff2f914661978a3dbca01c0037638a88c8b8f1c73af3a2f514e181b2c503d0dbabd1542f_9"
          },
          "properties": {}
        },
        {
          "ruleId": "0e4823b6-8541-3be5-aa3d-73963038e6d6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_batcher/verify_timestamps.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "endLine": 126,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        exit(verify_timestamps(trace_data, FLAGS.preserve))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "75efeac30b7feea2c5d97e15256f4e82de27d2f24a66a9fae2d692371604848f4e609d11a37d359fdca6c96682da1a705cedc4684ab654258cfc3b6893a14787_0"
          },
          "properties": {}
        },
        {
          "ruleId": "785217dd-ae28-30f5-ba71-ceee1f19b5a3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_custom_ops/cuda_op_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 74,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0053c2b3d7f30adec01775468dd156ed08badc8f664d474f38f98b77670c895ac67d1b8fa96a3d67b395843ce0de55d13be16ef2f13a595c15f0135f28ff1a5a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b0c4a81b-4395-3f05-afe9-e010a95da82f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_custom_ops/mod_op_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 74,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b5467c0e27cb5c9cc0736af6b15b17ef2577079f21bdbc10aa97e61073df01641410c929781df76a86de7e133b33db5ba854cbc633e7c86045462fde023650d6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8d1f83d8-8d2d-349c-87a3-aa327c2ff054",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_custom_ops/onnx_op_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 74,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "22515009d95b6da068f07423ba1d3b7c297a6c0fd52186f0ed2ee39694240ea357ef2ff8e28e71fe8bb6d9f26c4957af4235dbea519e0eb7b6693be1553b970b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2c601d09-e032-3d08-96cc-4d2b0eaa347c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_custom_ops/vision_op_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 9,
                  "endLine": 73,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6494f458437dbc833046126040e98bf9b7c2804b63455a97bac72c73a749edd6fa4ac4b8892e9132dba752873cc28b5ef4b6530a347a9f5c1ddc23b060cd6fc8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "231bc188-879e-3ba6-92ee-1724937e7831",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_custom_ops/zero_out_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 74,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4823da858f8de2984dd40f7aa78f1cfe3798212138449333361b0c2b3b01ea86490a4803e37b664a5abda4ff07e28599439bcededa380d77740ea73c5002e68a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a68f859f-a8a0-38f3-8777-ded2eda83147",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_data_compression/validation.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "endLine": 53,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "caea7b3c952a2fdf51d74e87c7ba7af94eb4a1404955ca2e48e4812ea7e49045e19d816813f56e41d97937de3ee26604dd2372c45f67fe436ed76dfb746d97ac_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9d67e957-7249-3bec-a533-679494e43161",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_data_compression/validation.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 17,
                  "endLine": 57,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "caea7b3c952a2fdf51d74e87c7ba7af94eb4a1404955ca2e48e4812ea7e49045e19d816813f56e41d97937de3ee26604dd2372c45f67fe436ed76dfb746d97ac_1"
          },
          "properties": {}
        },
        {
          "ruleId": "33f455c3-bff1-3736-9d31-012fb1da5ba3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_data_compression/validation.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 5,
                  "endLine": 61,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    globals()[sys.argv[1]]()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "36771074cf468961343edd20bb314eda8f83e1765e27934a460e083c091451aa6f5338772e815da165d15b070ac946c98c8cd72226093286615c775456b46f3e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "25a2cf4e-ee4f-3d6b-bcb3-3eb35217cf27",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_device_memory_tracker/test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 9,
                  "endLine": 80,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f91e32258bb544fc861d32a3e52edd06e57ad77a63c7f1e3b739afbe8bb99f88e481cf051042009a6f523187d6c3fd42e0d98902ba73200f5991738a70a7f038_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fdf25658-f01d-3855-b597-22963b57c7be",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_dyna_sequence_batcher/dyna_sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 837,
                  "startColumn": 17,
                  "endLine": 837,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "be5c6c6e59b13770c808055c0d7041f08ef86b21cb37134ed893e295fc5143a2ecc866d6117eefa0909402e6e839ac4f5b1dac89beeb3dc40e34f72044ca0d9d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d6523f5d-0412-356f-ad59-7c6057356cbd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_dyna_sequence_batcher/dyna_sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1062,
                  "startColumn": 17,
                  "endLine": 1062,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "be5c6c6e59b13770c808055c0d7041f08ef86b21cb37134ed893e295fc5143a2ecc866d6117eefa0909402e6e839ac4f5b1dac89beeb3dc40e34f72044ca0d9d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c700f17d-3444-3a3e-b138-866bcb31ce70",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_dyna_sequence_batcher/dyna_sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1272,
                  "startColumn": 17,
                  "endLine": 1272,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "be5c6c6e59b13770c808055c0d7041f08ef86b21cb37134ed893e295fc5143a2ecc866d6117eefa0909402e6e839ac4f5b1dac89beeb3dc40e34f72044ca0d9d_2"
          },
          "properties": {}
        },
        {
          "ruleId": "6802d45c-1311-3071-87af-685894b388b5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function '__call__' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_grpc/grpc_client_plugin_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 5,
                  "endLine": 48,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    def __call__(self, request):\n        request.headers.update(self._headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4f67d75471576cc89f7ee032ab594015c5aa06be9c6f5836108e5eed31f788beb27a8e264669b59106aef5ea01282fcb3dc677791ef277dc8c9766b3a6a17291_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8e6ae640-5021-319f-b4fd-628ec4d4e1fc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_grpc/python_unit_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 9,
                  "endLine": 129,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ef79a99007bd3b8d49828f08e77f99a1bf85b01db5105d11f212b94fdb3d93cd366f5776a721b834830afc03d700c68e07d7a31c7ac7d9cd2758822b1e197686_0"
          },
          "properties": {}
        },
        {
          "ruleId": "32d81402-2294-3fdd-a3c0-7b68d71fdf8b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_grpc/python_unit_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 9,
                  "endLine": 151,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ef79a99007bd3b8d49828f08e77f99a1bf85b01db5105d11f212b94fdb3d93cd366f5776a721b834830afc03d700c68e07d7a31c7ac7d9cd2758822b1e197686_1"
          },
          "properties": {}
        },
        {
          "ruleId": "935af63a-1351-34d3-babb-72f05c75998c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_http/generate_endpoint_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 16,
                  "endLine": 61,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        return requests.post(\n            url,\n            data=inputs if isinstance(inputs, str) else json.dumps(inputs),\n            headers=headers,\n            stream=stream,\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "21b105e93b7c4174e80fee38b63536a813c24f5bb88508396bed9ff1db568059f5223255139de09901254f7bc3c5959fc4a250b59e069f22d2101d22c21ffd6d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8afeb4ff-15dd-3d26-91b5-b076fa3ee319",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_http/generate_endpoint_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 16,
                  "endLine": 67,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        return requests.post(\n            url, data=inputs if isinstance(inputs, str) else json.dumps(inputs)\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "21b105e93b7c4174e80fee38b63536a813c24f5bb88508396bed9ff1db568059f5223255139de09901254f7bc3c5959fc4a250b59e069f22d2101d22c21ffd6d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "6bead17b-2630-30ad-b570-1312d520a41e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_http/generate_endpoint_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 13,
                  "endLine": 73,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        r = requests.post(\n            url, data=inputs if isinstance(inputs, str) else json.dumps(inputs)\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "21b105e93b7c4174e80fee38b63536a813c24f5bb88508396bed9ff1db568059f5223255139de09901254f7bc3c5959fc4a250b59e069f22d2101d22c21ffd6d_2"
          },
          "properties": {}
        },
        {
          "ruleId": "f3f1e231-dcba-3194-9ef0-e9fdb2e43eb7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function '__call__' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_http/http_client_plugin_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 5,
                  "endLine": 49,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    def __call__(self, request):\n        request.headers.update(self._headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "761ee437342a1e77e1942974b8234fae07807ec036c04254387735577adee0ff66de8833daa822af073dfb0c11bdc2aa79c9fe0e11754e97947dd3344c051f21_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2f211b08-d4fa-3f6e-84ae-0e0c4e5cfbb8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_http/http_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 13,
                  "endLine": 52,
                  "endColumn": 89,
                  "snippet": {
                    "text": "        r = requests.post(self._get_infer_url(model), data=input_bytes, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "dfd0f6047f4cc22d32c01d99393880dadd73665ee4d1b74ddf4a021138622e734de19ac91b49b9ed2f13a8e5363b68942bd1fa7899b8d57619cdb221bd57a25d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a49ebdaf-2277-36fd-94c2-05a09a2513cb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_http/http_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 13,
                  "endLine": 83,
                  "endColumn": 83,
                  "snippet": {
                    "text": "        r = requests.post(self._get_infer_url(model), data=input, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "dfd0f6047f4cc22d32c01d99393880dadd73665ee4d1b74ddf4a021138622e734de19ac91b49b9ed2f13a8e5363b68942bd1fa7899b8d57619cdb221bd57a25d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "5df13795-9545-3c81-92b9-e4d4ef82c179",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_http/http_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 13,
                  "endLine": 104,
                  "endColumn": 83,
                  "snippet": {
                    "text": "        r = requests.post(self._get_infer_url(model), data=input, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9388b6236d6eff7006e6c308144747504ba0a6efe768e72e85a95da60e6cd23c55675854470f8b17a25c700bebe411d3ea47aff8f92496f9101b35ffc5bf2820_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9868628b-114c-3699-9e95-f06c748afc39",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_http/http_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 13,
                  "endLine": 125,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        r = requests.post(\n            self._get_infer_url(model), data=input.tobytes(), headers=headers\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9388b6236d6eff7006e6c308144747504ba0a6efe768e72e85a95da60e6cd23c55675854470f8b17a25c700bebe411d3ea47aff8f92496f9101b35ffc5bf2820_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f2c8ba0d-3641-3b25-91b1-e6ebce6f0701",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_http/http_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 13,
                  "endLine": 148,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        r = requests.post(\n            self._get_infer_url(model), data=input.tobytes(), headers=headers\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9388b6236d6eff7006e6c308144747504ba0a6efe768e72e85a95da60e6cd23c55675854470f8b17a25c700bebe411d3ea47aff8f92496f9101b35ffc5bf2820_2"
          },
          "properties": {}
        },
        {
          "ruleId": "024346ee-246c-3799-a1f2-3a2a9e3b270f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_http/nginx.conf",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 13,
                  "endLine": 52,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            proxy_pass http://backend;\n            proxy_set_header Host $host;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1059fbffa7d8f5116bed4122e28219d7f6c83044b6660d6fc284eff53ca9a873f9531305bf3f16152365418e488fce5651ab2e600f1ed4a1ddbb428fe2c87974_0"
          },
          "properties": {}
        },
        {
          "ruleId": "64100bf6-4b02-3f89-83ae-aecde49889b3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_http_fuzz/fuzztest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 9,
                  "endLine": 90,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        csv_log = open(\"fuzz_results.csv\", \"w\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "af75bc329ebd2c3f8ae9020246ddc9428da986ff0496ee1b04868e7feaa7d6703d4e3ef493915dffc118d4dce61b588ac19863ee17548dc800b6481bcc079391_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4ce76412-9fda-3b33-9587-aaf78409199a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_https/nginx.conf",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 16,
                  "snippet": {
                    "text": "server {\n   listen 443 ssl;\n   server_name localhost;\n\n   ssl_certificate /etc/nginx/cert.crt;\n   ssl_certificate_key /etc/nginx/cert.key;\n\n    location / {\n              proxy_pass http://localhost:8000;\n              proxy_http_version 1.1;\n              }"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a12852159c47054c69663f2e341c1e80453fa36d2c2454bf90ec12fa6a031c410ec1016a5a203032435e1dbbbc3f0e4fdb6f43c4cabbdb1b7863f311a3b94a35_0"
          },
          "properties": {}
        },
        {
          "ruleId": "86824dc6-d5b3-3b04-91de-88efdb5df391",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_libtorch_instance_group_kind_model/gen_models.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 5,
                  "endLine": 81,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "33dcafb7c8a5d1895bd1c9585331f0ff9cc654c11f7221486f3ce245d4f872a1e389c6c80783e644b04d1b7e803bd03c63e65ad18138bddf672c45fff5f8b677_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e302f9d2-e697-3d23-a744-c256135e551d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 13,
                  "endLine": 557,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(5)  # wait for model to load"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d65fe27b-17ab-3f6f-8e74-561178adcfcc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 13,
                  "endLine": 673,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(5)  # wait for model to load"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_2"
          },
          "properties": {}
        },
        {
          "ruleId": "89ca61f0-3698-34e3-b263-776d820eb108",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 633,
                  "startColumn": 13,
                  "endLine": 633,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(5)  # wait for model to unload"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_1"
          },
          "properties": {}
        },
        {
          "ruleId": "fb0068d7-b329-3230-841f-2e4b36821dc2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 13,
                  "endLine": 716,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(5)  # wait for model to unload"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_3"
          },
          "properties": {}
        },
        {
          "ruleId": "d72bf9cf-bf95-36de-89c9-3038cd4f34c4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 776,
                  "startColumn": 13,
                  "endLine": 776,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(5)  # wait for model to load"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_4"
          },
          "properties": {}
        },
        {
          "ruleId": "50adfecc-614f-3780-94a8-560ee4644c69",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 13,
                  "endLine": 815,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(5)  # wait for model to unload (but it shouldn't)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_5"
          },
          "properties": {}
        },
        {
          "ruleId": "8cda9054-eda4-3a6f-99cf-d6d914d188ae",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 927,
                  "startColumn": 13,
                  "endLine": 927,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(5)  # wait for version to unload"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_6"
          },
          "properties": {}
        },
        {
          "ruleId": "f5aac143-1889-3a92-bfc1-4174fefc367d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 967,
                  "startColumn": 13,
                  "endLine": 967,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(5)  # wait for version to load"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_7"
          },
          "properties": {}
        },
        {
          "ruleId": "ba465b36-f9db-337b-b5ce-d95083f68423",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 992,
                  "startColumn": 13,
                  "endLine": 992,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(5)  # wait for model to load"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_8"
          },
          "properties": {}
        },
        {
          "ruleId": "e3bce753-5f22-34b0-9f93-703fd4b42b8d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 13,
                  "endLine": 1011,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(5)  # wait for version to unload (but it shouldn't)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_9"
          },
          "properties": {}
        },
        {
          "ruleId": "6819863b-0419-3eab-a93f-dd625e201549",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1088,
                  "startColumn": 9,
                  "endLine": 1088,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)  # wait for models to reload"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_10"
          },
          "properties": {}
        },
        {
          "ruleId": "f365e053-3e83-394b-9481-7a9a2ee1c87f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1117,
                  "startColumn": 9,
                  "endLine": 1117,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)  # wait for models to reload"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_11"
          },
          "properties": {}
        },
        {
          "ruleId": "251bda8e-279b-361e-978b-332bd1fd7c6d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1215,
                  "startColumn": 9,
                  "endLine": 1215,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)  # wait for models to reload"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_12"
          },
          "properties": {}
        },
        {
          "ruleId": "14536c0d-6b12-3d30-b446-0f51441a9272",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1284,
                  "startColumn": 9,
                  "endLine": 1284,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)  # wait for models to reload"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_13"
          },
          "properties": {}
        },
        {
          "ruleId": "a2e4e638-522d-322c-9033-52320a3486eb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1304,
                  "startColumn": 9,
                  "endLine": 1304,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)  # wait for model to unload"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_14"
          },
          "properties": {}
        },
        {
          "ruleId": "35794d7b-d0a6-34e6-b09b-918acb466691",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1834,
                  "startColumn": 9,
                  "endLine": 1834,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "09c68ccb3fedfa4044cc77dbf1404ecabed9f7a905e94c34242c576dff71a9938e7e1a531d5f55d01ee37ab64ae3b0bac2b00af87d691dafa6eab40cf4e1b2b0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "67b9004b-6e79-3ca2-a820-cf8cc5c49f85",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1893,
                  "startColumn": 9,
                  "endLine": 1893,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "09c68ccb3fedfa4044cc77dbf1404ecabed9f7a905e94c34242c576dff71a9938e7e1a531d5f55d01ee37ab64ae3b0bac2b00af87d691dafa6eab40cf4e1b2b0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "5e766de7-40f9-3ea6-8c80-fa9deaa3a86c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1951,
                  "startColumn": 9,
                  "endLine": 1951,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "09c68ccb3fedfa4044cc77dbf1404ecabed9f7a905e94c34242c576dff71a9938e7e1a531d5f55d01ee37ab64ae3b0bac2b00af87d691dafa6eab40cf4e1b2b0_2"
          },
          "properties": {}
        },
        {
          "ruleId": "0dbac08b-9543-3847-a1d2-716220c6e8f8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2585,
                  "startColumn": 9,
                  "endLine": 2585,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3d8ddab0421f7afccb8a5e0ad894e99b2ab3113d9a31ad7486eab747668577b096caeb173be5199dd681776c15d7277ba79598524cfef4c8721d22e1d6a68872_0"
          },
          "properties": {}
        },
        {
          "ruleId": "aee42f32-f4e3-35ee-a3de-fb61f7fcf48e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2604,
                  "startColumn": 13,
                  "endLine": 2604,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3d8ddab0421f7afccb8a5e0ad894e99b2ab3113d9a31ad7486eab747668577b096caeb173be5199dd681776c15d7277ba79598524cfef4c8721d22e1d6a68872_1"
          },
          "properties": {}
        },
        {
          "ruleId": "d0078a83-b64c-33b9-9105-869926684647",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2644,
                  "startColumn": 9,
                  "endLine": 2644,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3d8ddab0421f7afccb8a5e0ad894e99b2ab3113d9a31ad7486eab747668577b096caeb173be5199dd681776c15d7277ba79598524cfef4c8721d22e1d6a68872_2"
          },
          "properties": {}
        },
        {
          "ruleId": "873356dc-b159-300f-8df6-90327a0f2fe7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2689,
                  "startColumn": 13,
                  "endLine": 2689,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3d8ddab0421f7afccb8a5e0ad894e99b2ab3113d9a31ad7486eab747668577b096caeb173be5199dd681776c15d7277ba79598524cfef4c8721d22e1d6a68872_3"
          },
          "properties": {}
        },
        {
          "ruleId": "7c3d5785-2ad2-37ae-80e5-2214323fbfc5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2702,
                  "startColumn": 9,
                  "endLine": 2702,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8c7fc887c6cd50514a3972f2a19dacfa1f8c5363d2f57252076996fc86a386db3a76812694cf6270fb26091a33d731355b786ae2f8ad232f034e39ede6b6d24_15"
          },
          "properties": {}
        },
        {
          "ruleId": "cea676c5-725d-3558-bb7f-5c22623d186b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2731,
                  "startColumn": 9,
                  "endLine": 2731,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3d8ddab0421f7afccb8a5e0ad894e99b2ab3113d9a31ad7486eab747668577b096caeb173be5199dd681776c15d7277ba79598524cfef4c8721d22e1d6a68872_4"
          },
          "properties": {}
        },
        {
          "ruleId": "cd04855c-2eac-39b3-843c-15b8a00d7ed5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2751,
                  "startColumn": 13,
                  "endLine": 2751,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3d8ddab0421f7afccb8a5e0ad894e99b2ab3113d9a31ad7486eab747668577b096caeb173be5199dd681776c15d7277ba79598524cfef4c8721d22e1d6a68872_5"
          },
          "properties": {}
        },
        {
          "ruleId": "d3bcaca6-92e8-3931-8654-483338ce86b4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2851,
                  "startColumn": 13,
                  "endLine": 2851,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # wait between loads"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7adf7262c1cb9c7c268c017a389c8ec0f83a6a43ce272d952ec4f124c5a59cc3a19506d4591e5796c1cb6258f5139dbaba2b85a3a84be4756962812717566a43_0"
          },
          "properties": {}
        },
        {
          "ruleId": "085fb396-733f-3905-82af-835a00f8ffd9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2880,
                  "startColumn": 13,
                  "endLine": 2880,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # wait between load and unload"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7adf7262c1cb9c7c268c017a389c8ec0f83a6a43ce272d952ec4f124c5a59cc3a19506d4591e5796c1cb6258f5139dbaba2b85a3a84be4756962812717566a43_1"
          },
          "properties": {}
        },
        {
          "ruleId": "877dbad1-e213-31f7-bad5-1d086f338f47",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2895,
                  "startColumn": 13,
                  "endLine": 2895,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # wait between load and unload"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7adf7262c1cb9c7c268c017a389c8ec0f83a6a43ce272d952ec4f124c5a59cc3a19506d4591e5796c1cb6258f5139dbaba2b85a3a84be4756962812717566a43_2"
          },
          "properties": {}
        },
        {
          "ruleId": "2107bc55-14e6-3862-9d98-8f1f7021f2a6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_lifecycle/lifecycle_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3171,
                  "startColumn": 25,
                  "endLine": 3171,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                        time.sleep(6)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c4666aae7b6db7cb70eba258af97d4565ed88bb43a3d3cae81dfa7d33b5f64743b9e3171630a6681b8cbaadfb83267a2cd73e11f13fb5ddf44a720839c02c2a5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d6760f95-5843-3392-9ab4-42a87fb9c7b1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_long_running_stress/crashing_client.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 5,
                  "endLine": 101,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7cc301dceba29b286a1230029906c1d80e4389acbe336ccc21c6219239fa536fe43b30a6f68aa25174aedccdc2f09692e3b594d99a33fe463be9408715b0d913_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a9b629d9-0518-380a-a148-b11713427e57",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_long_running_stress/scenarios.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 33,
                  "endLine": 164,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            completed_process = subprocess.run(\n                arg_list, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "80f68e22c06ad62c4d0a029f81d5ffcf84dde806e9a49752813acc66f7e2a75b38b485c3e0e03df121104492d0527e9e6ece26d7215544be016c5260bf9afdb0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ded9ad8b-84a8-3dfd-ae13-86f9bfd4580b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"Request count: ([0-9]+)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_long_running_stress/scenarios.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 17,
                  "endLine": 183,
                  "endColumn": 80,
                  "snippet": {
                    "text": "            m = re.search(r\"Request count: ([0-9]+)\", completed_process.stdout)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f7d079400a3d60a2ae808c5a99f7b532add868d090c52cb23f7addeb2e11560480512fdc2c9660b088e2105dee0c83d184f4dc3972ccdf60688147b4f262a285_0"
          },
          "properties": {}
        },
        {
          "ruleId": "00797a3e-d68e-3a7e-b0c6-325cde170ba4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'check_output' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_long_running_stress/scenarios.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 15,
                  "endLine": 469,
                  "endColumn": 86,
                  "snippet": {
                    "text": "        log = subprocess.check_output([sys.executable, crashing_client, \"-t\", trial])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "73ff2693808ae7c4dbbcd47cd9d64ab8fd809fbd603818151e0f922aee3efcb7c1f23998dce7f8c8654e4cb6ea9a9779480fd8cb0618aaaec3bcee7c9a545053_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d6e9e4e9-c1f3-3994-bd38-734d27b7894d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_long_running_stress/stress.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 9,
                  "endLine": 620,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "649ded068218a4f7cf09ff6341d99be3e5e5fe44b0452ef7ad62b53385cb9862190aaa1de6e81762b4931793c7f5e7b86d29b750d600023b1a01b7044bd2354c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "795dfde2-0fdd-3cf5-b525-7007a796e8ad",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_memory_growth/busy_op_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 9,
                  "endLine": 87,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6e0b874bad9cea96e5f66b79f23bcce39b4b6b197141aa597023d0d7d08affeac9add49ac29bee3df4d4849a13edd1d8d51ecac2c7d550cf4be5ed814cf3ace7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4071d7bb-8849-3b5d-ae70-77e19d438371",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_metrics/metrics_queue_size_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 13,
                  "endLine": 97,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        r = requests.get(self.metrics_url)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f85d48034169e8af9de3591a360017bbd4df88e5c1e2b344173f4e6a1905564c13c31920aa5cd1ea516b8753896d22092bfd9a59a1b1a341b5561eb765dfde2b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f61c26d9-83a8-3d44-8112-cd6da2855ec7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_metrics/metrics_queue_size_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 9,
                  "endLine": 163,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "615631d827410fe18e83e0fe8b7c052ba8f5ee6b96e9e131b324a3802b6bbac98973531011abbdd756d3904de5043cba216c85ff3653ba85578ddf1191aadb9d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "39e309e4-7cf0-33c3-b042-8f9b37c384af",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_metrics/metrics_queue_size_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 9,
                  "endLine": 242,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "615631d827410fe18e83e0fe8b7c052ba8f5ee6b96e9e131b324a3802b6bbac98973531011abbdd756d3904de5043cba216c85ff3653ba85578ddf1191aadb9d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "b8bbc67e-161f-34a5-b891-20d3972dae33",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_namespacing/test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 9,
                  "endLine": 198,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6db09410d72816433f471fc6ea3d92da997b91b0aa39c037eca90aede272b888d362b386b17493be30a809c36e4ee9ba3b8318c465c497340dc7942f48c1a6a9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e2703f46-ff79-382e-8470-c463865d2cfe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_namespacing/test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 9,
                  "endLine": 206,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6db09410d72816433f471fc6ea3d92da997b91b0aa39c037eca90aede272b888d362b386b17493be30a809c36e4ee9ba3b8318c465c497340dc7942f48c1a6a9_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f4a4be85-6a5a-3242-af04-334156d3bc7c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_queue/model_queue_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 13,
                  "endLine": 155,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            time.sleep(0.5)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6a27756cffa5256d46937b6a65015920b79fceb21ca1d241d57b956c4d7b414a1b194e631d0a5ec52c9598dcd9262b29830e6d9bdac0ca52cb9085009911dc4b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "022413b8-44a4-3054-bf17-e7f14ffcd913",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_queue/model_queue_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 17,
                  "endLine": 223,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                time.sleep(0.2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "359760e0f60d1ebefc154a928eb13041fdedd359d20b0f234e7f100208dfcfcb156e6cd828812a137cb14fd9925b0af7e981081f78fef10b170d3f40688c0c5f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1d1dba05-9115-363f-8ee2-293dbae33a70",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_queue/model_queue_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 13,
                  "endLine": 264,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            time.sleep(0.2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "359760e0f60d1ebefc154a928eb13041fdedd359d20b0f234e7f100208dfcfcb156e6cd828812a137cb14fd9925b0af7e981081f78fef10b170d3f40688c0c5f_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e108c06e-63ba-3f5d-8e42-458a403ea221",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_queue/model_queue_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 13,
                  "endLine": 322,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            time.sleep(0.2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "359760e0f60d1ebefc154a928eb13041fdedd359d20b0f234e7f100208dfcfcb156e6cd828812a137cb14fd9925b0af7e981081f78fef10b170d3f40688c0c5f_2"
          },
          "properties": {}
        },
        {
          "ruleId": "fc7c148b-92a3-32e8-81d4-4c1220a3680c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_queue/model_queue_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 13,
                  "endLine": 371,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            time.sleep(0.2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "359760e0f60d1ebefc154a928eb13041fdedd359d20b0f234e7f100208dfcfcb156e6cd828812a137cb14fd9925b0af7e981081f78fef10b170d3f40688c0c5f_3"
          },
          "properties": {}
        },
        {
          "ruleId": "b7f5cf55-bf0e-3214-b25b-68cf37a9cbda",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_queue/model_queue_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 13,
                  "endLine": 419,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            time.sleep(0.2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "359760e0f60d1ebefc154a928eb13041fdedd359d20b0f234e7f100208dfcfcb156e6cd828812a137cb14fd9925b0af7e981081f78fef10b170d3f40688c0c5f_4"
          },
          "properties": {}
        },
        {
          "ruleId": "edb88c2a-994c-37f8-a72e-bf20ac163572",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_queue/model_queue_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 13,
                  "endLine": 474,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            time.sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e60b95358470fcf4498941cacb57de92369c4cb2e67f828868acf507d0fb2b17a68b677c073ffd3355454aac1449123e040a096b25ad8fef9a614da390da4045_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c9275bf5-013d-375d-a554-cbed5587bd05",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_queue/model_queue_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 13,
                  "endLine": 476,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            time.sleep(0.2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "359760e0f60d1ebefc154a928eb13041fdedd359d20b0f234e7f100208dfcfcb156e6cd828812a137cb14fd9925b0af7e981081f78fef10b170d3f40688c0c5f_5"
          },
          "properties": {}
        },
        {
          "ruleId": "1563c8d8-3eca-3908-b4bd-4420abea23b5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_queue/model_queue_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 13,
                  "endLine": 520,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            time.sleep(0.1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e60b95358470fcf4498941cacb57de92369c4cb2e67f828868acf507d0fb2b17a68b677c073ffd3355454aac1449123e040a096b25ad8fef9a614da390da4045_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f7e8f2b5-8839-3f9f-a539-7145d5d3a897",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_queue/model_queue_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 13,
                  "endLine": 522,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            time.sleep(0.2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "359760e0f60d1ebefc154a928eb13041fdedd359d20b0f234e7f100208dfcfcb156e6cd828812a137cb14fd9925b0af7e981081f78fef10b170d3f40688c0c5f_6"
          },
          "properties": {}
        },
        {
          "ruleId": "86344cb4-7db6-3211-b0b1-f1758142f7f2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_queue/model_queue_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 606,
                  "startColumn": 17,
                  "endLine": 606,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                time.sleep(0.2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "359760e0f60d1ebefc154a928eb13041fdedd359d20b0f234e7f100208dfcfcb156e6cd828812a137cb14fd9925b0af7e981081f78fef10b170d3f40688c0c5f_7"
          },
          "properties": {}
        },
        {
          "ruleId": "0b2a92d5-f3dd-3c99-a23d-9ced5039a010",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_update/instance_update_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 9,
                  "endLine": 79,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        time.sleep(30)  # time for instances to finish unloading"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff3a039b56b476a281ecc428917cc165d286ccfccb76cd479d3b4feb5922890da4899344486c0a0cfa68e4886049e233f60a82471d44d00f448fac7f1ce543fe_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d40302f8-23f3-3d3b-8818-0c098f3230f4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_update/instance_update_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 17,
                  "endLine": 119,
                  "endColumn": 42,
                  "snippet": {
                    "text": "                time.sleep(poll_interval)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7e231ac475d849e1f56222180c6b303f29abd7fba215bd15b5043c071c3118d94336af08cd7b237c90788ac3254fd6bfd189a6276330a0112e3d3a9bbe70c3ed_0"
          },
          "properties": {}
        },
        {
          "ruleId": "19f19478-b13b-322e-a6dc-bdaa90a20842",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_update/instance_update_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 9,
                  "endLine": 220,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        time.sleep(0.1)  # larger the gap for config.pbtxt timestamp to update"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0a8a48e34a0568cb82ffcaf74158ee9b1414d77a0727aa0ddf9ab7bad206cdd01bb192b79b39922e207b1ba946fae245bcdd6a4f09503b59177177878914888e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4a75e4d6-522c-34ca-9587-a079a1f131dd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_update/instance_update_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 9,
                  "endLine": 246,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        time.sleep(0.1)  # larger the gap for config.pbtxt timestamp to update"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0a8a48e34a0568cb82ffcaf74158ee9b1414d77a0727aa0ddf9ab7bad206cdd01bb192b79b39922e207b1ba946fae245bcdd6a4f09503b59177177878914888e_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ced6816c-ae8d-3cd7-91c2-aff8b82e56f4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_update/instance_update_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 9,
                  "endLine": 283,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        time.sleep(0.1)  # larger the gap for config.pbtxt timestamp to update"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0a8a48e34a0568cb82ffcaf74158ee9b1414d77a0727aa0ddf9ab7bad206cdd01bb192b79b39922e207b1ba946fae245bcdd6a4f09503b59177177878914888e_2"
          },
          "properties": {}
        },
        {
          "ruleId": "bc244e28-93c9-3ddf-bfcb-14b49bfbbe63",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_update/instance_update_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 9,
                  "endLine": 290,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        time.sleep(0.1)  # larger the gap for config.pbtxt timestamp to update"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0a8a48e34a0568cb82ffcaf74158ee9b1414d77a0727aa0ddf9ab7bad206cdd01bb192b79b39922e207b1ba946fae245bcdd6a4f09503b59177177878914888e_3"
          },
          "properties": {}
        },
        {
          "ruleId": "ce1a2b7b-22d8-3e34-b6cb-5eb7f798b600",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_update/instance_update_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 13,
                  "endLine": 370,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # make sure inference has started"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "70490180580b609a7e5b3b06a1375c53fdeb28f1e358d33866c035ba80520cea84c591ec52859fa0cde4940dd2ac32daace373a1ac81027b59356afc37809539_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6f2acde8-21fb-3572-ad45-fab1ae659766",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_update/instance_update_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 13,
                  "endLine": 399,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # make sure update has started"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "70490180580b609a7e5b3b06a1375c53fdeb28f1e358d33866c035ba80520cea84c591ec52859fa0cde4940dd2ac32daace373a1ac81027b59356afc37809539_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f1c205de-ad27-3a1c-86b7-4ba7a0b64edf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_model_update/instance_update_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 502,
                  "startColumn": 9,
                  "endLine": 502,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)  # make sure the log file is updated"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f5d8f3de9e4f1594d4fcf392880daf39e01aa180f10279c34ff8ad0195c449282569ab2cd1053d2a081f9352026d9e4764b121d12af07e0b41c545e4c337f06a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a5c8b39c-8be5-31bc-a250-53f0afc4eb21",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_nan_inf/nan_inf_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 20,
                  "endLine": 57,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        response = requests.post(\n            \"http://localhost:8000/v2/models/nan_inf_output/infer\",\n            data=json.dumps(payload),\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e0f63b16be453102ccf82317a873ce3a0af3e89d8ce11c6e46c0b078c9a31d04583e671ecd0dda4781934f3d68eb2061f5113356783178813576f3252f1b02f0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a5db47b6-6ae1-3aba-90a1-bde15851c5d4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_nullchar_string/nullchar_string_client.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 74,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "244df46953b75969f73ac77227d98410b2720d86754b35334216e7c198e46080130f3f51a283cf39af3713a18a4b81634849c9339220c4f31643ba22e8970cfb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "83217e96-199f-3178-80f3-9c0f2b2f6f0b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_optional_input/optional_input_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 13,
                  "endLine": 152,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7289b110b756c86ad03de23eb90b46277eb3b2ddbb2b102cc9ba2cf73108e088dc3df1f78530bec53f95814ca7aef8aaf6feb3eb6dee12f53aa51a43262d7291_0"
          },
          "properties": {}
        },
        {
          "ruleId": "83595708-f926-3e41-beeb-c62e97c81cf3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_optional_input/optional_input_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 17,
                  "endLine": 299,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                time.sleep(0.5)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0dbe1828849c2fe15ae8e0af607c13135913cfadbbae26aa7cf43b89a7e8d124a3ce089ac6deb1401523ee349c12696d98a7e633abd26d0a828d849a5c981680_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2cede3de-55b1-3e28-a064-ae6c0330c3cb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_optional_input/optional_input_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 17,
                  "endLine": 338,
                  "endColumn": 32,
                  "snippet": {
                    "text": "                time.sleep(0.5)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0dbe1828849c2fe15ae8e0af607c13135913cfadbbae26aa7cf43b89a7e8d124a3ce089ac6deb1401523ee349c12696d98a7e633abd26d0a828d849a5c981680_1"
          },
          "properties": {}
        },
        {
          "ruleId": "aefa82d8-df28-331e-9fb5-3e1eb24b5820",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_parallel_copy/parallel_copy_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 13,
                  "endLine": 116,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "58557d87470398f1b84b6e17675f01b08b7531ab7fee83a605d380af66618e40545612fe9806e22fd0a5ad7084b373e9ec987fb70b4a9560dd0f1fdaa02902ff_0"
          },
          "properties": {}
        },
        {
          "ruleId": "819aa8eb-d525-337c-976f-9362f5623345",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_perf_analyzer/nginx.conf",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 16,
                  "snippet": {
                    "text": "server {\n   listen 443 ssl;\n   server_name localhost;\n\n   ssl_certificate /etc/nginx/cert.crt;\n   ssl_certificate_key /etc/nginx/cert.key;\n\n    location / {\n              proxy_pass http://localhost:8000;\n              proxy_http_version 1.1;\n              }"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ecc4f69589999297dbfadf9555fdb163ab4fc99cac0861f756fb80c1bdf7d1dfd5c406f6ab8633aa80a3ab5e4191ec028a91c8a6afd81561296fb0366d09a0e0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f2cf68c7-6e7a-3cfc-9ccb-d4720d762319",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_repoagent_checksum/identity_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 9,
                  "endLine": 67,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c4b2cc00d67f907d473a8260fdb7bd9f3b3d9234a3d185ec0c295819c55b3ad6c8fb012251769397f32fc73eb4f137524569e7654c00bdebba98267508c1f2c6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7c5d86d7-87b5-33bb-880f-8ee64a94aa3e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/grpc_cancellation_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 9,
                  "endLine": 99,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(2)  # ensure the inference has started"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6905acf550f306dffb2e35dcd3e9995fe662f961b1d15bc0ebff3f31deb1f60e1e672cc652cf4988ec8cda08b3aed484a1ca1ac9aff2c7867135c9fc1ae3dd88_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ba062445-e686-34db-bac7-58aed617946f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/grpc_cancellation_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 9,
                  "endLine": 101,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        time.sleep(0.1)  # context switch"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "dd6912108152131f91cc74f7a84561be7a34c16174ac824623457d41860a4b90f161c673d83afad16e8180816f3b3cb0748020ef8d7c20e6f0f4d1e874b5da81_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bb402a35-1390-3779-9e98-33338c931884",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/grpc_cancellation_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 9,
                  "endLine": 109,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(2)  # ensure the inference has started"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6905acf550f306dffb2e35dcd3e9995fe662f961b1d15bc0ebff3f31deb1f60e1e672cc652cf4988ec8cda08b3aed484a1ca1ac9aff2c7867135c9fc1ae3dd88_1"
          },
          "properties": {}
        },
        {
          "ruleId": "fde487d7-e5ff-3203-866c-70ded9b85858",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 13,
                  "endLine": 98,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure the slots are filled"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c621aa16-a34d-3b40-be94-31eded9cb407",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 13,
                  "endLine": 104,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure the request is queued"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_1"
          },
          "properties": {}
        },
        {
          "ruleId": "b8ce4617-f90e-3f25-bc8e-3dfbce357fef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 13,
                  "endLine": 108,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure the cancellation is delivered"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_2"
          },
          "properties": {}
        },
        {
          "ruleId": "526191e7-5210-30b5-bc90-990185421d49",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 13,
                  "endLine": 126,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure the slot is filled"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_3"
          },
          "properties": {}
        },
        {
          "ruleId": "e5315dbc-9014-30e6-9579-eb676277bf3a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 13,
                  "endLine": 141,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure the sequence is backlogged"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_4"
          },
          "properties": {}
        },
        {
          "ruleId": "ebcb966e-0287-3ce8-9861-8c22df769409",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 13,
                  "endLine": 146,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure the cancellation is delivered"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_5"
          },
          "properties": {}
        },
        {
          "ruleId": "f2e072a8-c244-304b-b5d2-eed08712c105",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 13,
                  "endLine": 147,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure reaper thread has responded"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_6"
          },
          "properties": {}
        },
        {
          "ruleId": "deade1f1-ac3b-30be-9074-55c666a30f1a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 13,
                  "endLine": 174,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure the sequence has started"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_7"
          },
          "properties": {}
        },
        {
          "ruleId": "04ff0216-aa98-374d-96cc-54aba58446b8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 13,
                  "endLine": 183,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure the requests are queued"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_8"
          },
          "properties": {}
        },
        {
          "ruleId": "af5d35f2-9152-3c76-94bd-b667a9c86ed8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 13,
                  "endLine": 188,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure the cancellation is delivered"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_9"
          },
          "properties": {}
        },
        {
          "ruleId": "c90a5df7-6354-3909-b07c-86ea760f6b04",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 13,
                  "endLine": 189,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # ensure reaper thread has responded"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_10"
          },
          "properties": {}
        },
        {
          "ruleId": "e20abb0d-f332-326a-89cd-bc6613d0fb31",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 9,
                  "endLine": 202,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(2)  # ensure the inference has started"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_11"
          },
          "properties": {}
        },
        {
          "ruleId": "68a4d23c-a004-3ad8-aabd-a2eece2a86b5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 9,
                  "endLine": 205,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(2)  # ensure the cancellation is delivered"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_12"
          },
          "properties": {}
        },
        {
          "ruleId": "a885e128-5055-3f6f-9c90-13082a5427fa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 9,
                  "endLine": 224,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(2)  # ensure the requests are delivered"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_13"
          },
          "properties": {}
        },
        {
          "ruleId": "1656c3dd-4621-3808-a3d4-49d0065f56de",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 9,
                  "endLine": 227,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(2)  # ensure the cancellation is delivered"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_14"
          },
          "properties": {}
        },
        {
          "ruleId": "f39a1ee9-b9b5-3dd4-a5fd-b08afd0f2475",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_request_cancellation/scheduler_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 9,
                  "endLine": 228,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(2)  # ensure reaper thread has responded"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "71abb451084e98e0db5459f1c0b6448632e465a21ab3f634a0d341dff60232856c6b4a233b843ecc11d4d7a3936ff83c3d891ebc647734838c92c3315a3cad76_15"
          },
          "properties": {}
        },
        {
          "ruleId": "e47b0232-487b-331d-8a23-f2fd950645a2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 13,
                  "endLine": 132,
                  "endColumn": 89,
                  "snippet": {
                    "text": "        r = requests.post(self.url_mme_, data=json.dumps(request_body), headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0270b29a2dd5e9a4acdb16567aabf2ec3d8417cc13c78f4d28080e975e7d7cb1dd69ccb94e1f6d28695adec93b95ccd4f3552ed3c79c18b2b35fce4c1a4bbff3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e02b28bc-4f0b-30eb-a096-d404e76b3a33",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 9,
                  "endLine": 133,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)  # wait for model to load"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7771867b7ef15e675ac6a8f3e095a1db536781c59e525220fa1bb88e283ed7a32fc5ad5c952c675731ae530a2c8dbbc61d4be9010334dd8d1d101c184436525e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "eeba5a04-d061-31c3-884a-0849032808aa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 9,
                  "endLine": 144,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)  # wait for model to load"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7771867b7ef15e675ac6a8f3e095a1db536781c59e525220fa1bb88e283ed7a32fc5ad5c952c675731ae530a2c8dbbc61d4be9010334dd8d1d101c184436525e_1"
          },
          "properties": {}
        },
        {
          "ruleId": "6b4f91c5-fcda-3cf9-b3de-7eeee9f8251b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 13,
                  "endLine": 143,
                  "endColumn": 89,
                  "snippet": {
                    "text": "        r = requests.post(self.url_mme_, data=json.dumps(request_body), headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0270b29a2dd5e9a4acdb16567aabf2ec3d8417cc13c78f4d28080e975e7d7cb1dd69ccb94e1f6d28695adec93b95ccd4f3552ed3c79c18b2b35fce4c1a4bbff3_1"
          },
          "properties": {}
        },
        {
          "ruleId": "1e6f1525-e256-363d-8275-1403e3bdab98",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 13,
                  "endLine": 154,
                  "endColumn": 89,
                  "snippet": {
                    "text": "        r = requests.post(self.url_mme_, data=json.dumps(request_body), headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0270b29a2dd5e9a4acdb16567aabf2ec3d8417cc13c78f4d28080e975e7d7cb1dd69ccb94e1f6d28695adec93b95ccd4f3552ed3c79c18b2b35fce4c1a4bbff3_2"
          },
          "properties": {}
        },
        {
          "ruleId": "edcfb19a-b9b4-38bb-b36f-2e8f81b280ca",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 9,
                  "endLine": 155,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)  # wait for model to load"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7771867b7ef15e675ac6a8f3e095a1db536781c59e525220fa1bb88e283ed7a32fc5ad5c952c675731ae530a2c8dbbc61d4be9010334dd8d1d101c184436525e_2"
          },
          "properties": {}
        },
        {
          "ruleId": "3836de5f-bfd0-32d3-b884-d3f6402b1b50",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 13,
                  "endLine": 163,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        r = requests.get(self.url_mme_)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0270b29a2dd5e9a4acdb16567aabf2ec3d8417cc13c78f4d28080e975e7d7cb1dd69ccb94e1f6d28695adec93b95ccd4f3552ed3c79c18b2b35fce4c1a4bbff3_3"
          },
          "properties": {}
        },
        {
          "ruleId": "a690d959-2331-3a44-8313-c69604713665",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 9,
                  "endLine": 164,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebd54a59d7b978779621cb8575eed3d735a3bda64a2170b9cb2d0371b1c1a839e25385eccaa38bb1de83f7ef96fb81c2c8d6335a886f1fb3510f8bc559dd0152_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3e845549-5a27-3035-a544-1f335f75825c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 13,
                  "endLine": 201,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        r = requests.get(get_url)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0270b29a2dd5e9a4acdb16567aabf2ec3d8417cc13c78f4d28080e975e7d7cb1dd69ccb94e1f6d28695adec93b95ccd4f3552ed3c79c18b2b35fce4c1a4bbff3_4"
          },
          "properties": {}
        },
        {
          "ruleId": "f423c71b-44c6-397a-9054-130ffb393366",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 9,
                  "endLine": 202,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebd54a59d7b978779621cb8575eed3d735a3bda64a2170b9cb2d0371b1c1a839e25385eccaa38bb1de83f7ef96fb81c2c8d6335a886f1fb3510f8bc559dd0152_1"
          },
          "properties": {}
        },
        {
          "ruleId": "25e8bd4b-f2db-33d8-8fad-0146dba9ac14",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 13,
                  "endLine": 234,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        r = requests.post(invoke_url, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d0df77569868c805a2f586b3c9957e7460c436f007931e5bea776c5eede98322654ac3f2fea7a4f1971dd8d0495282d557903e99422763f97786d87cf4f75def_5"
          },
          "properties": {}
        },
        {
          "ruleId": "437d7e46-8de9-3489-ba90-42b575a1090c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 13,
                  "endLine": 274,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        r = requests.post(invoke_url, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0270b29a2dd5e9a4acdb16567aabf2ec3d8417cc13c78f4d28080e975e7d7cb1dd69ccb94e1f6d28695adec93b95ccd4f3552ed3c79c18b2b35fce4c1a4bbff3_5"
          },
          "properties": {}
        },
        {
          "ruleId": "13c337fa-bc52-37f9-a335-59c32262164c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 13,
                  "endLine": 295,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        r = requests.delete(unload_url)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0270b29a2dd5e9a4acdb16567aabf2ec3d8417cc13c78f4d28080e975e7d7cb1dd69ccb94e1f6d28695adec93b95ccd4f3552ed3c79c18b2b35fce4c1a4bbff3_6"
          },
          "properties": {}
        },
        {
          "ruleId": "457f74bf-bb65-3536-b514-4d2c52ad18af",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 9,
                  "endLine": 296,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebd54a59d7b978779621cb8575eed3d735a3bda64a2170b9cb2d0371b1c1a839e25385eccaa38bb1de83f7ef96fb81c2c8d6335a886f1fb3510f8bc559dd0152_2"
          },
          "properties": {}
        },
        {
          "ruleId": "8a1815b9-9bdb-3fc9-8c16-1c3f6a92f399",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 13,
                  "endLine": 305,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        r = requests.delete(unload_url)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0270b29a2dd5e9a4acdb16567aabf2ec3d8417cc13c78f4d28080e975e7d7cb1dd69ccb94e1f6d28695adec93b95ccd4f3552ed3c79c18b2b35fce4c1a4bbff3_7"
          },
          "properties": {}
        },
        {
          "ruleId": "23c102d7-e2bb-3f96-a071-951f6d009419",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 9,
                  "endLine": 306,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebd54a59d7b978779621cb8575eed3d735a3bda64a2170b9cb2d0371b1c1a839e25385eccaa38bb1de83f7ef96fb81c2c8d6335a886f1fb3510f8bc559dd0152_3"
          },
          "properties": {}
        },
        {
          "ruleId": "ab7d94c0-706c-30a5-90f7-72af35533a01",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 13,
                  "endLine": 315,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        r = requests.delete(unload_url)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0270b29a2dd5e9a4acdb16567aabf2ec3d8417cc13c78f4d28080e975e7d7cb1dd69ccb94e1f6d28695adec93b95ccd4f3552ed3c79c18b2b35fce4c1a4bbff3_8"
          },
          "properties": {}
        },
        {
          "ruleId": "fd8d11a4-57c6-3a28-ad42-3428068fef57",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 9,
                  "endLine": 316,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebd54a59d7b978779621cb8575eed3d735a3bda64a2170b9cb2d0371b1c1a839e25385eccaa38bb1de83f7ef96fb81c2c8d6335a886f1fb3510f8bc559dd0152_4"
          },
          "properties": {}
        },
        {
          "ruleId": "d8ce7064-d5ec-3f9a-82e1-c560735d59a4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 13,
                  "endLine": 330,
                  "endColumn": 89,
                  "snippet": {
                    "text": "        r = requests.post(self.url_mme_, data=json.dumps(request_body), headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0270b29a2dd5e9a4acdb16567aabf2ec3d8417cc13c78f4d28080e975e7d7cb1dd69ccb94e1f6d28695adec93b95ccd4f3552ed3c79c18b2b35fce4c1a4bbff3_9"
          },
          "properties": {}
        },
        {
          "ruleId": "85116732-7a51-31f3-841d-324967f8737d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 9,
                  "endLine": 331,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)  # wait for model to load"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7771867b7ef15e675ac6a8f3e095a1db536781c59e525220fa1bb88e283ed7a32fc5ad5c952c675731ae530a2c8dbbc61d4be9010334dd8d1d101c184436525e_3"
          },
          "properties": {}
        },
        {
          "ruleId": "02128ee8-8a98-32d2-a5c8-7ab9bf3b8227",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 13,
                  "endLine": 358,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        r = requests.post(invoke_url, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0270b29a2dd5e9a4acdb16567aabf2ec3d8417cc13c78f4d28080e975e7d7cb1dd69ccb94e1f6d28695adec93b95ccd4f3552ed3c79c18b2b35fce4c1a4bbff3_10"
          },
          "properties": {}
        },
        {
          "ruleId": "c8237f4a-4164-3c6e-92a3-54062ae2385c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 13,
                  "endLine": 369,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        r = requests.delete(unload_url, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0270b29a2dd5e9a4acdb16567aabf2ec3d8417cc13c78f4d28080e975e7d7cb1dd69ccb94e1f6d28695adec93b95ccd4f3552ed3c79c18b2b35fce4c1a4bbff3_11"
          },
          "properties": {}
        },
        {
          "ruleId": "45f9f54e-c316-3153-8a23-f4a606f22ff7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_multi_model_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 9,
                  "endLine": 370,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7771867b7ef15e675ac6a8f3e095a1db536781c59e525220fa1bb88e283ed7a32fc5ad5c952c675731ae530a2c8dbbc61d4be9010334dd8d1d101c184436525e_4"
          },
          "properties": {}
        },
        {
          "ruleId": "ff802db3-549c-359e-86fa-0207ffdbe2c7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 13,
                  "endLine": 105,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=json.dumps(request), headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5c6700fc36a76e4c54ea60feaeb5a462a38617fdbf8c694efd49972d33b8f6e5f74918ec23a63dd4d1a39482609ffeda5ca7a041a656ed8ff7529336e75caf31_0"
          },
          "properties": {}
        },
        {
          "ruleId": "644a19b2-3a1a-37a1-9900-15d4d9b90a13",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 13,
                  "endLine": 135,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5c6700fc36a76e4c54ea60feaeb5a462a38617fdbf8c694efd49972d33b8f6e5f74918ec23a63dd4d1a39482609ffeda5ca7a041a656ed8ff7529336e75caf31_1"
          },
          "properties": {}
        },
        {
          "ruleId": "b9c6dad1-c702-3375-99c0-bf667d53a40e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 13,
                  "endLine": 172,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5c6700fc36a76e4c54ea60feaeb5a462a38617fdbf8c694efd49972d33b8f6e5f74918ec23a63dd4d1a39482609ffeda5ca7a041a656ed8ff7529336e75caf31_2"
          },
          "properties": {}
        },
        {
          "ruleId": "e48388b2-af71-37c1-8aed-d390c3577d8e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 13,
                  "endLine": 202,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5c6700fc36a76e4c54ea60feaeb5a462a38617fdbf8c694efd49972d33b8f6e5f74918ec23a63dd4d1a39482609ffeda5ca7a041a656ed8ff7529336e75caf31_3"
          },
          "properties": {}
        },
        {
          "ruleId": "d5fd5717-b5e9-3f56-b19f-2e63a2e8da61",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 13,
                  "endLine": 232,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5c6700fc36a76e4c54ea60feaeb5a462a38617fdbf8c694efd49972d33b8f6e5f74918ec23a63dd4d1a39482609ffeda5ca7a041a656ed8ff7529336e75caf31_4"
          },
          "properties": {}
        },
        {
          "ruleId": "a4d95e3c-693d-385b-a487-b55380ef4ccd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 13,
                  "endLine": 275,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "30fa623925cc16fa774c01ca340ad2abb973200031a6846715a93e14b82cbcbd5a4588c3b04c044e1d9d1343070c656e6317f27f48a5cf4920eec6a6687656f8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "515868fb-5362-3691-b3a4-dd17929cebb4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 13,
                  "endLine": 310,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "30fa623925cc16fa774c01ca340ad2abb973200031a6846715a93e14b82cbcbd5a4588c3b04c044e1d9d1343070c656e6317f27f48a5cf4920eec6a6687656f8_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e0ccf5c5-2af1-3bd9-b27c-4fc4e03d4eb0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 13,
                  "endLine": 343,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "30fa623925cc16fa774c01ca340ad2abb973200031a6846715a93e14b82cbcbd5a4588c3b04c044e1d9d1343070c656e6317f27f48a5cf4920eec6a6687656f8_2"
          },
          "properties": {}
        },
        {
          "ruleId": "84177c09-64e3-3cc9-a782-2b2f17012be5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sagemaker/sagemaker_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 13,
                  "endLine": 376,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "30fa623925cc16fa774c01ca340ad2abb973200031a6846715a93e14b82cbcbd5a4588c3b04c044e1d9d1343070c656e6317f27f48a5cf4920eec6a6687656f8_3"
          },
          "properties": {}
        },
        {
          "ruleId": "82a261d5-6a03-380f-900e-6cc509c7e1fb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 957,
                  "startColumn": 21,
                  "endLine": 957,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b29125dc8017655a01143da328b6a90406585b11c60829397140d88142e03ea916ff1365e43f264d0e4cc0e72b14856f26091a9de611ae95b3afc6c7106c1932_0"
          },
          "properties": {}
        },
        {
          "ruleId": "96f0da24-0d49-3753-8a14-9ff4f92ab7f7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1351,
                  "startColumn": 21,
                  "endLine": 1351,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b29125dc8017655a01143da328b6a90406585b11c60829397140d88142e03ea916ff1365e43f264d0e4cc0e72b14856f26091a9de611ae95b3afc6c7106c1932_1"
          },
          "properties": {}
        },
        {
          "ruleId": "54ac5789-319c-320d-be99-3965acae1357",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1996,
                  "startColumn": 21,
                  "endLine": 1996,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b29125dc8017655a01143da328b6a90406585b11c60829397140d88142e03ea916ff1365e43f264d0e4cc0e72b14856f26091a9de611ae95b3afc6c7106c1932_2"
          },
          "properties": {}
        },
        {
          "ruleId": "f0c64bc3-121a-393f-bbcd-744f14642dde",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2235,
                  "startColumn": 21,
                  "endLine": 2235,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ef244e52e4815ef711bf864516909f227fc7c6b1c3b88433eb0f95e9c65943b5afe80c33f800da33f56db014cc6730ab6a8bdb96d85f26e0c42a06066f3e7868_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b4b74a28-81b9-3eba-b38c-6edb2ee2e3bc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2237,
                  "startColumn": 21,
                  "endLine": 2237,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ef244e52e4815ef711bf864516909f227fc7c6b1c3b88433eb0f95e9c65943b5afe80c33f800da33f56db014cc6730ab6a8bdb96d85f26e0c42a06066f3e7868_1"
          },
          "properties": {}
        },
        {
          "ruleId": "0d55c15d-3785-3286-b08f-f30ae60f7aef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2239,
                  "startColumn": 21,
                  "endLine": 2239,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ef244e52e4815ef711bf864516909f227fc7c6b1c3b88433eb0f95e9c65943b5afe80c33f800da33f56db014cc6730ab6a8bdb96d85f26e0c42a06066f3e7868_2"
          },
          "properties": {}
        },
        {
          "ruleId": "f9e42e18-9e7f-30bc-85d3-a5bbd1699930",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2241,
                  "startColumn": 21,
                  "endLine": 2241,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ef244e52e4815ef711bf864516909f227fc7c6b1c3b88433eb0f95e9c65943b5afe80c33f800da33f56db014cc6730ab6a8bdb96d85f26e0c42a06066f3e7868_3"
          },
          "properties": {}
        },
        {
          "ruleId": "5e80612c-6775-3705-b9df-281d0dca4760",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2243,
                  "startColumn": 21,
                  "endLine": 2243,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ef244e52e4815ef711bf864516909f227fc7c6b1c3b88433eb0f95e9c65943b5afe80c33f800da33f56db014cc6730ab6a8bdb96d85f26e0c42a06066f3e7868_4"
          },
          "properties": {}
        },
        {
          "ruleId": "08d0fcae-d825-347b-a8c5-5fd2d6040e34",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2456,
                  "startColumn": 21,
                  "endLine": 2456,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b29125dc8017655a01143da328b6a90406585b11c60829397140d88142e03ea916ff1365e43f264d0e4cc0e72b14856f26091a9de611ae95b3afc6c7106c1932_3"
          },
          "properties": {}
        },
        {
          "ruleId": "666a5d0b-4d86-314a-b857-53ebec845d05",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2684,
                  "startColumn": 21,
                  "endLine": 2684,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ef244e52e4815ef711bf864516909f227fc7c6b1c3b88433eb0f95e9c65943b5afe80c33f800da33f56db014cc6730ab6a8bdb96d85f26e0c42a06066f3e7868_5"
          },
          "properties": {}
        },
        {
          "ruleId": "47412823-4c77-3aab-aa97-e08645800020",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2904,
                  "startColumn": 21,
                  "endLine": 2904,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(2)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ef244e52e4815ef711bf864516909f227fc7c6b1c3b88433eb0f95e9c65943b5afe80c33f800da33f56db014cc6730ab6a8bdb96d85f26e0c42a06066f3e7868_6"
          },
          "properties": {}
        },
        {
          "ruleId": "3628f1db-1b87-3e45-8508-be8559b0d83b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3040,
                  "startColumn": 21,
                  "endLine": 3040,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "592e4e8e04d1e501695ef3a491671e21cc0fdabdb9cf662f18b2cb1b9e1283582bf1f44669036409af424a349e2534bd298bebe6a29cc2d0195969a017a2b95b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7b5fb90a-1df1-39c9-aed8-b81728bf33ea",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3151,
                  "startColumn": 21,
                  "endLine": 3151,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "592e4e8e04d1e501695ef3a491671e21cc0fdabdb9cf662f18b2cb1b9e1283582bf1f44669036409af424a349e2534bd298bebe6a29cc2d0195969a017a2b95b_1"
          },
          "properties": {}
        },
        {
          "ruleId": "d2b24d89-5c47-377e-97d5-926696b825eb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3262,
                  "startColumn": 21,
                  "endLine": 3262,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                    time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "592e4e8e04d1e501695ef3a491671e21cc0fdabdb9cf662f18b2cb1b9e1283582bf1f44669036409af424a349e2534bd298bebe6a29cc2d0195969a017a2b95b_2"
          },
          "properties": {}
        },
        {
          "ruleId": "63dc57fd-e18e-3ab2-860c-0cc641931d65",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3353,
                  "startColumn": 9,
                  "endLine": 3353,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "592e4e8e04d1e501695ef3a491671e21cc0fdabdb9cf662f18b2cb1b9e1283582bf1f44669036409af424a349e2534bd298bebe6a29cc2d0195969a017a2b95b_3"
          },
          "properties": {}
        },
        {
          "ruleId": "cb987b79-6f9e-3bc2-93ff-5bdfd10940a2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_batcher/sequence_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3412,
                  "startColumn": 9,
                  "endLine": 3412,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "592e4e8e04d1e501695ef3a491671e21cc0fdabdb9cf662f18b2cb1b9e1283582bf1f44669036409af424a349e2534bd298bebe6a29cc2d0195969a017a2b95b_4"
          },
          "properties": {}
        },
        {
          "ruleId": "e4b9e22d-29ff-3335-83f4-ebd45562b783",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_sequence_corrid_batcher/sequence_corrid_batcher_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 17,
                  "endLine": 203,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d47077b1f8c04b6b8909f0b6a45a655737a4d2292a81d57a5a7e3a87ef5051a518dde2d9de0b728dce37c077fabf6269c981196bc2d117d7bf8d73e834926990_0"
          },
          "properties": {}
        },
        {
          "ruleId": "af2758ec-4a46-37c1-ac3b-a0b95579804f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_storage_S3_local/mock_s3_service.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 13,
                  "endLine": 107,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            time.sleep(poll_interval)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48f8e683bc18a7a0844575b0092b330fccf39974fb0c728301c0621622facb314456eb568f05bb57eec4b209609665347c24df7785a4edd0f0ee442cfa50e276_0"
          },
          "properties": {}
        },
        {
          "ruleId": "01c51bab-8f42-39d5-9517-2f59ed756e82",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"\\n\\t{\\n\\t\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 27,
                  "endLine": 54,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            json_string = re.sub(\"\\n\\t{\\n\\t\", \"{\", data)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7883e69bcc6b4150dc0bc481fb94d8c597497e522da9fee1daf3bf0a728c1f0fe415a1756387f28796b2d4b07334861f7fb75d7a336af7f2bbd8c240d371987b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "097e4e44-700d-38a9-a12a-560c83832fc3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"resources     : \\n\\t\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 27,
                  "endLine": 60,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            json_string = re.sub(\n                \"resources     : \\n\\t\", \"resources     : {\\n\\t\", json_string\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "93c95746b1df8520a75095b09ba8806053a8c2f43b873989c08bb5141dae99be61919c0be867288fb22e84fd08899f20f13e4372a8c674d0f135a520318ec76f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b642f807-c1a1-3ea5-a73a-1d36dc581844",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"\\n  instr-lib     :\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 27,
                  "endLine": 63,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            json_string = re.sub(\n                \"\\n  instr-lib     :\", \"}\\n  instr-lib     :\", json_string\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3f840244fd092fc8a8824215fb862ebcdfc18020f1c505731be71d1710afc379e6e3556d3463b1fa7e5c739233de6cf20b54b9006c0c5bc350f0bf93194a1540_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f4093371-4e24-38b9-8a35-e45493363ab7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\": \\n\\t\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 27,
                  "endLine": 66,
                  "endColumn": 64,
                  "snippet": {
                    "text": "            json_string = re.sub(\": \\n\\t\", ':\"\",', json_string)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "55b8f1589c66a1fc7fc48f393ba0f600e40d4218b47ca1ca57319ed68d2b4d44c8d0b66002a1fa3583675eaeb5f625da3c3d88b671695fe3a57c635a45783038_0"
          },
          "properties": {}
        },
        {
          "ruleId": "14f995d3-757c-3f40-9221-3ea8210899d2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\": \\n\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 27,
                  "endLine": 67,
                  "endColumn": 62,
                  "snippet": {
                    "text": "            json_string = re.sub(\": \\n\", ':\"\",', json_string)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "822a30a72358dd4e13e6d642dd0e4c5d735ff36a560a3084a4b46ad24d42f8d7018a68eb4b305e79f0296314643e6f83fb47668c1b6078d9b0dde3d48471317e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "af5f96da-7e80-3ca4-a8ca-7ae28408b6a9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"\\n|\\n\\t\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 27,
                  "endLine": 70,
                  "endColumn": 62,
                  "snippet": {
                    "text": "            json_string = re.sub(\"\\n|\\n\\t\", \",\", json_string)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c98f1df0c3de3d19a68691f8f3e161df581a6cc067db662870d710096fe104096dab8548f87f95aa7abebbc630309310ecd5d55af6c31ecf36fc5b41a4f53593_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1e23649c-49e0-3e5b-a0fc-e95d77e33619",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"\\t\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 27,
                  "endLine": 72,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            json_string = re.sub(\"\\t\", \"\", json_string)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "777d7588a9324e3eee2df9a411d3cc2bdf7e7e53fd86dc375d849532c41846a9348a755d58ea73e90d78b4ba42200bbaf761ce8d07b4f7a3c030d81026e213cc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "dcc2acca-9f07-3d2e-99b4-998792656263",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\b([\\w.-]+)\\b\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 27,
                  "endLine": 75,
                  "endColumn": 73,
                  "snippet": {
                    "text": "            json_string = re.sub(r\"\\b([\\w.-]+)\\b\", r'\"\\1\"', json_string)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "01a53d18b0914b2e1941ec3920ec9dda797c284e56baa317e1786fb0576f6aaec52777ca5dfb1aa862a39b48596a80ad736f3d9d743a600ce591711b8255bf6c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "eec7fd67-7e71-3373-ba89-6333d8add123",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `'\"span\" \"kind\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 27,
                  "endLine": 77,
                  "endColumn": 78,
                  "snippet": {
                    "text": "            json_string = re.sub('\"span\" \"kind\"', '\"span kind\"', json_string)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4fe28f70bb54adc29458aca701aa9d7a82b62f06db4524d54456cd581cb3c2674f62b20528e2baf9f84eaa27a3afe6d58e4f9f7aeb1d0601553806f315e28bd7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f1ff08f4-a0ee-3faf-8ee8-dfb8c1ad74a4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"{,\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 27,
                  "endLine": 79,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            json_string = re.sub(\"{,\", \"{\", json_string)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5790f2579910ca082f064fa0729b2787ca66aebb6f5934f0bf24bd3eee7504027ee0de0c52935b34c736396622843fac1bb0398f5b1edd34b20fc1b3ed390a49_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4a2176cd-4962-3053-80d9-deb429f4d023",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\",}\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 27,
                  "endLine": 80,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            json_string = re.sub(\",}\", \"}\", json_string)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c3f903275941139066b60c781d73f99eaba4514be4ac9ea59677131d6a0dfab5cbff4c9ded9a75b0ad7eb8804abbcd757744e493fed78529023d9c7be0c49bca_0"
          },
          "properties": {}
        },
        {
          "ruleId": "53c70fc3-0fed-3c1b-b58c-00dbbefd393e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"}{\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 27,
                  "endLine": 82,
                  "endColumn": 59,
                  "snippet": {
                    "text": "            json_string = re.sub(\"}{\", \"},{\", json_string)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "146cb484d23ae34b5c827d377c986663bffa77fdc934a4b91049fe067bcf4039cb58384ff4f16a09c66d250e48af4d7858b5bb38ed29306420bfbb0f35532a54_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0b8c1f62-42e3-364b-bf30-d41d7bc85baf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `'\"events\"        : {'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 27,
                  "endLine": 87,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            json_string = re.sub(\n                '\"events\"        : {', '\"events\"        : [{', json_string\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cdffb14018765a3796e5ce7b5d2544b877416296044ccd8f4fa065d5c7f3ee43eae4455e955f0534af9e6e4de934f4d1f108314a5ecd7a063abc021d1d6911d0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d0096f20-1dd6-3f09-b808-4872370bc855",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `'},  \"links\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trace/opentelemetry_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 27,
                  "endLine": 89,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            json_string = re.sub('},  \"links\"', '}],  \"links\"', json_string)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "646ef834d7e0c5dceafe22efa362df94f069917d2f08a21e827deb1db161823564f146c4458a47c8065c6c9e8d84e0b9c2c305c0406a30080ed267c5066a7816_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e4566c72-8cd9-3747-881d-9750f0a7ee06",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trt_shape_tensors/trt_shape_tensor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 13,
                  "endLine": 160,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "11c4c6fbc3b2648179c8103efbbf5bd6aad0819ccc439a1c6dfdb16dc728a94f24eff40b6378ae0c2df4783677e8581cc768805417bc7e64d6a1df3b92a52d82_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e014a839-2df7-3013-84bd-b0b13b37e345",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trt_shape_tensors/trt_shape_tensor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 13,
                  "endLine": 335,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "11c4c6fbc3b2648179c8103efbbf5bd6aad0819ccc439a1c6dfdb16dc728a94f24eff40b6378ae0c2df4783677e8581cc768805417bc7e64d6a1df3b92a52d82_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f4e85076-7a39-3e5b-9cfd-adb9a4c51b2f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trt_shape_tensors/trt_shape_tensor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 13,
                  "endLine": 378,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "11c4c6fbc3b2648179c8103efbbf5bd6aad0819ccc439a1c6dfdb16dc728a94f24eff40b6378ae0c2df4783677e8581cc768805417bc7e64d6a1df3b92a52d82_2"
          },
          "properties": {}
        },
        {
          "ruleId": "0f9b51e5-21a6-34fb-9466-27c39b648725",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_trt_shape_tensors/trt_shape_tensor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 17,
                  "endLine": 640,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "11c4c6fbc3b2648179c8103efbbf5bd6aad0819ccc439a1c6dfdb16dc728a94f24eff40b6378ae0c2df4783677e8581cc768805417bc7e64d6a1df3b92a52d82_3"
          },
          "properties": {}
        },
        {
          "ruleId": "2f704d20-17d1-32e8-a7be-a9283e14f55f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_vertex_ai/vertex_ai_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 13,
                  "endLine": 71,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b9b52cc8f73742dcb78ad42e9a399ba87dc31947ffdce9c96936d09b115f5869e6595b27d1ae4c34919aa8dd217b9b5c2ec02040313d484e7dc9a862fd6ff542_0"
          },
          "properties": {}
        },
        {
          "ruleId": "01bdd62c-7206-3ff9-9dc3-91e84842f742",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_vertex_ai/vertex_ai_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 13,
                  "endLine": 104,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b9b52cc8f73742dcb78ad42e9a399ba87dc31947ffdce9c96936d09b115f5869e6595b27d1ae4c34919aa8dd217b9b5c2ec02040313d484e7dc9a862fd6ff542_1"
          },
          "properties": {}
        },
        {
          "ruleId": "dd971842-4316-3931-b8c3-27b9232367a0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_vertex_ai/vertex_ai_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 13,
                  "endLine": 147,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b9b52cc8f73742dcb78ad42e9a399ba87dc31947ffdce9c96936d09b115f5869e6595b27d1ae4c34919aa8dd217b9b5c2ec02040313d484e7dc9a862fd6ff542_2"
          },
          "properties": {}
        },
        {
          "ruleId": "fa4f9897-4bb7-3d43-bd97-d7bc0045c953",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_vertex_ai/vertex_ai_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 13,
                  "endLine": 176,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b9b52cc8f73742dcb78ad42e9a399ba87dc31947ffdce9c96936d09b115f5869e6595b27d1ae4c34919aa8dd217b9b5c2ec02040313d484e7dc9a862fd6ff542_3"
          },
          "properties": {}
        },
        {
          "ruleId": "3807c477-8fff-3041-872a-0443a7bfc93b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_vertex_ai/vertex_ai_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 13,
                  "endLine": 216,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "47a846f2d5583bef0c4f8760e890ef92a364ef0b174e7b42607ef3acd8a495742a08f0641314021cf49b9afd8b343609b919bdeaf05728f077e0652bf73a5639_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1f6b7fc3-1ae9-3e92-9d7e-84a7dad09f4c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_vertex_ai/vertex_ai_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 13,
                  "endLine": 251,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "47a846f2d5583bef0c4f8760e890ef92a364ef0b174e7b42607ef3acd8a495742a08f0641314021cf49b9afd8b343609b919bdeaf05728f077e0652bf73a5639_1"
          },
          "properties": {}
        },
        {
          "ruleId": "eb7bbf37-3d47-3302-bfe4-822843da9411",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_vertex_ai/vertex_ai_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 13,
                  "endLine": 284,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "47a846f2d5583bef0c4f8760e890ef92a364ef0b174e7b42607ef3acd8a495742a08f0641314021cf49b9afd8b343609b919bdeaf05728f077e0652bf73a5639_2"
          },
          "properties": {}
        },
        {
          "ruleId": "9a529628-61f9-36a1-b8ca-6ff95ad98be3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/L0_vertex_ai/vertex_ai_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 13,
                  "endLine": 317,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        r = requests.post(self.url_, data=request_body, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "47a846f2d5583bef0c4f8760e890ef92a364ef0b174e7b42607ef3acd8a495742a08f0641314021cf49b9afd8b343609b919bdeaf05728f077e0652bf73a5639_3"
          },
          "properties": {}
        },
        {
          "ruleId": "6630052e-be6f-3f14-87ac-88993e66f365",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `COPYRIGHT_YEAR_RE` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/common/check_copyright.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 21,
                  "endLine": 123,
                  "endColumn": 50,
                  "snippet": {
                    "text": "copyright_year_re = re.compile(COPYRIGHT_YEAR_RE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "31438a9d6112867c44aa9b9cd8a07d70adfdc1844a9395a5223d41bba5b6947dba19ffac160ab3d1ed17036864b4194111393e8c5a7a2b6d15d5c16bb56d9c6b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d28484a2-1d62-3916-8fb1-f1ccb360a531",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/common/check_copyright.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 9,
                  "endLine": 303,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4f6abb8be687b0ff80ad5170df71ead886cc599e9695b2e9306d585c2cd81454a99c61fc676c39c2351cf96f09386edee468fb7997aa52c1ef1ecea1cb2388ff_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d96a02c3-b783-3a42-b8ae-143744804dd2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/common/check_copyright.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 5,
                  "endLine": 316,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    exit(0 if ret else 1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4f6abb8be687b0ff80ad5170df71ead886cc599e9695b2e9306d585c2cd81454a99c61fc676c39c2351cf96f09386edee468fb7997aa52c1ef1ecea1cb2388ff_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f7c7f733-f89b-3995-b0fe-036466703d72",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"snapshot=(.*?)heap_tree\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/common/check_massif_log.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 21,
                  "endLine": 44,
                  "endColumn": 85,
                  "snippet": {
                    "text": "        snapshots = re.findall(\"snapshot=(.*?)heap_tree\", contents, flags=re.DOTALL)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "40eb9db7bef8a845c105b0836e313eded3f41179aef823710bdb6d5d17709a811086f87d775a3f5ff12146c42e8a05d1b215f94cb54c0f29acc44436f389bda1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ff08a4e2-1940-337a-bb28-554b417a506c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "By default, 'requests' calls wait until the connection is closed.\nThis means a 'requests' call without a timeout will hang the program\nif a response is never received. Consider setting a timeout for all\n'requests'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/common/reporter.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 9,
                  "endLine": 115,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    r = requests.post(url, data=data, headers=headers)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8853f617bb4b8fb92bc667e2b786ef690a8b0ee489d3b9eeff8fb76c4ab70d8004e5f2a8739dc8e2b2403a624fcb5f2c86310f1a76ab9f4712ecaac485a1bfbe_0"
          },
          "properties": {}
        },
        {
          "ruleId": "997517e4-08f9-309c-a1bd-b33db861d869",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/common/sequence_util.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1115,
                  "startColumn": 13,
                  "endLine": 1115,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8687990db42597ace52859f0b836bd77228b554e8a81bb15007bdf0d138cc9db569763d839f3bbf9c51c8b8028b39cedf7963671e161d5982886b22909144584_0"
          },
          "properties": {}
        },
        {
          "ruleId": "85730a4b-dec3-32a7-a15c-a37e7450810f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/python_models/bls_model_loading/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 9,
                  "endLine": 44,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        time.sleep(30)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "76f54c8ddd29aabc6368416ee80903293f3baf3337beef3c5895e81771fb39566d90f880a3931ea53f83cea90f7094429f76d43bb3dfa699a983a20b1d055a6b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e6bbf68f-8e5a-3649-94ff-b159b500aaf4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/python_models/delayed_model/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 14,
                  "snippet": {
                    "text": "time.sleep(5)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f9b007b7a761d2165d0939e3f7c3f0c5bc384f367547793ad07cd0c10198b5206c30447830e917da9e76187db05e7c0e32d18ba8388086f1e2a23855b428a47c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f6d59a58-2b19-3404-89e3-abce8bd56808",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/python_models/dlpack_io_identity_decoupled/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "endLine": 47,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(5)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "992a949ded0008dfc8cc89bc4cfb7f706aca8f86d5fd1b6551f1471127d93695e527297d0269b7927b406ce5ac6a12789f7a9884eb337a53879aeebe70fdf54e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bda2fc53-273b-3f18-8586-fa31d107626c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/python_models/dlpack_io_identity_decoupled/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 17,
                  "endLine": 112,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                time.sleep(sleep_time_sec)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "56616bab56592c0ff7291729d83fc12084ebf2271990805ffa7669744703d971db6f7ac3f17588de5b903895fa49cb1ff2f2386c1dcc914758ec17315602d9ab_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5ee3cead-7799-3f38-92bb-abbda7a0d103",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'process_request' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/python_models/dlpack_square/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 5,
                  "endLine": 98,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    def process_request(self, request):\n        # Start a separate thread to send the responses for the request. The\n        # sending back the responses is delegated to this thread.\n        thread = threading.Thread(\n            target=self.response_thread,\n            args=(\n                request.get_response_sender(),\n                pb_utils.get_input_tensor_by_name(request, \"IN\"),\n                self.output_dtype,\n            ),\n        )\n\n        thread.daemon = True\n\n        with self.inflight_thread_count_lck:\n            self.inflight_thread_count += 1\n\n        thread.start()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c6a84c1b188e1dc370b5c416873327da2b4aa713b174992481ecf5c1d75211b8e69aa16f4e83ab00e1382cda9ece1c916a9ff6d3d5d279d44642e16a19dd4756_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b3eaeb84-2f41-3863-8117-812edeaf2748",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/python_models/execute_cancel/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 17,
                  "endLine": 71,
                  "endColumn": 30,
                  "snippet": {
                    "text": "                time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "893961c719dbb93d4c36ac30177f79d428e297443149654b4173853ba55d54c44d9085af31d379c48b028b641dba56644ca0e82e6c061ea10072a4eb73a234d9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "69d42677-1f84-3902-95cc-409474bca1ac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/python_models/execute_cancel/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 13,
                  "endLine": 93,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(2)  # execute after requests are released"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e0807428407c4d1f569c27a231fd0763847f0b0b6c8c1f5d2b48e29ae6ed8128fe574e60b94c229f9ad2da32d6ece21278f63faaa83a6b88bbba00c898fa7a63_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2c39d50d-c152-30dc-9f85-1797bb31462a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/python_models/ground_truth/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 9,
                  "endLine": 50,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        time.sleep(delay)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "04bcf61205fd80d5cd7da6b0fb86ab3a49a3b9f533b9ae0c65ee21ebc8f6dacc5c2e60813923d6c9ffaf8ba05eaf95b615d565ccf5ffd9ae063303f7f2f79f50_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9c0dd390-6053-3a94-a914-a3b99683d138",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/python_models/identity_fp32_timeout/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 13,
                  "endLine": 41,
                  "endColumn": 26,
                  "snippet": {
                    "text": "            time.sleep(5)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bf6c2a5c36d080ca3cd47dee78a84341c9136acf39e8e5b7d46e2248c9c78ae0a029496802afe10f5b387abc91da7240a2f8463f15f10b5a7527de6526763383_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5cdbbdf2-9cd4-3e26-8723-b9d50c1b870e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/python_models/init_exit/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 9,
                  "endLine": 34,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(3)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "da55324ab58004222ea71a7722c56ba5a2458941b075233eff0cb8f194341e0ca070c722add4b8f3e85d6f2b1ba8462347e93b55b51525651f8d7e670f3ecef4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "94d81afa-3cdb-3206-9cf3-9449fa14d583",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'get_next_sequence_output_tensor' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "qa/python_models/sequence_py/model.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 5,
                  "endLine": 62,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    def get_next_sequence_output_tensor(self, request):\n        sid = request.correlation_id()\n        flags = request.flags()\n        if flags == pb_utils.TRITONSERVER_REQUEST_FLAG_SEQUENCE_START:\n            if sid in self.sequences:\n                raise pb_utils.TritonModelException(\n                    \"Can't start a new sequence with existing ID\"\n                )\n            self.sequences[sid] = [1]\n        else:\n            if sid not in self.sequences:\n                raise pb_utils.TritonModelException(\n                    \"Need START flag for a sequence ID that doesn't already exist.\"\n                )\n\n            last = self.sequences[sid][-1]\n            self.sequences[sid].append(last + 1)\n\n        output = self.sequences[sid][-1]\n        output = np.array([output])\n        out_tensor = pb_utils.Tensor(\"OUTPUT0\", output.astype(np.int32))\n        return out_tensor"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f53944b44a93b8874a70063489cc1171f4ebb4a8424f77a8613d96deea99e566a596569abf0ff7b47e81d81af46041ccad1ea44b02c54ef4324632002ff719bb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6c90ca2a-b8f2-3398-89ad-fcd76f8c274a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'run' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/amd_hipify.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 9,
                  "endLine": 14,
                  "endColumn": 114,
                  "snippet": {
                    "text": "    s = subprocess.run([hipify_perl_path, \"-roc\", src_file_path], stdout=subprocess.PIPE, text=True, check=False).stdout"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "95dcba904ac5bef621ac24d8cfd768f4cfcf9f367be4bafa94350b2ce2a323d249dcacdfdd48c37ea190d1b2f4de826d8478f37ba69c73e9ba6ebcf82b4eb47b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c79c0f10-0185-37a3-bbf0-d0d9a9aae041",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/command_line_parser.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1209,
                  "startColumn": 18,
                  "endLine": 1210,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  while ((flag = getopt_long(\n              argc, argv, \"\", &long_options[0], &option_index)) != -1) {"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7b970ed51eb4b46a8f68cbecfc72197a4f39f43176d629735f89c1c7ee2a290ed0d5ee8ff2efd7edb97af2da3880cff27a4b14bb8ec35d3ddef4a9dd6d825072_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a738b40c-f321-3dfa-ab6e-d939cc34f890",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/command_line_parser.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1841,
                  "startColumn": 10,
                  "endLine": 1841,
                  "endColumn": 55,
                  "snippet": {
                    "text": "  size_t delim_second = arg.find(\":\", delim_first + 1);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8a3366c6dc68e5aa3f58cb67e161d62d6974539b829498d8a550884cd1ae59aa5b174c9c92e9dca9340290f4f6e101976789fba36b38d8781a09eaec3527d472_0"
          },
          "properties": {}
        },
        {
          "ruleId": "41a2a572-46ce-333d-a7f5-def71c765b3a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/command_line_parser.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1845,
                  "startColumn": 12,
                  "endLine": 1845,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    size_t delim_third = arg.find(\":\", delim_second + 1);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a0865e4c14c93ff128d4a9be324edffd97649fb60c9a15f6869e2c7b1f8be2adcc5e57690efa35de3bd1d86f6181c8a94ed340750feac71e0c1ce10ee6b4c3df_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ead02e40-36a0-3241-9b3e-2f288126120f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/command_line_parser.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1850,
                  "startColumn": 5,
                  "endLine": 1851,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    count = ParseOption<int>(\n        arg.substr(delim_first + 1, delim_second - delim_first - 1));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "70c76aab6c80d052ff7a8cac817ee21cbc416ff0c3c870b93db0008b5ab5782eaf22b15e56eeb1db622ee22eb7d16529b46acdcaf8cc59170a17d09d29750b55_0"
          },
          "properties": {}
        },
        {
          "ruleId": "939efb0b-a629-3a29-9319-6ef9ab0cb8d0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/command_line_parser.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1852,
                  "startColumn": 5,
                  "endLine": 1852,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    device_id = ParseOption<int>(arg.substr(delim_second + 1));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "32217a49fcdbc0bc2072a1aa4dc62cccc1eb4aaa2b77ca423c52bbf4edbc9523d14010b783115ec0a98447d5fc363e8666c87e73304f7e4611c8c1fe6e519e2d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9505e629-a44d-36d2-bc87-5379d8f52386",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/command_line_parser.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1856,
                  "startColumn": 5,
                  "endLine": 1856,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    count = ParseOption<int>(arg.substr(delim_first + 1));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "70c76aab6c80d052ff7a8cac817ee21cbc416ff0c3c870b93db0008b5ab5782eaf22b15e56eeb1db622ee22eb7d16529b46acdcaf8cc59170a17d09d29750b55_1"
          },
          "properties": {}
        },
        {
          "ruleId": "7f575e20-224b-3c13-8454-34cf132947a2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/common.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 23,
                  "endLine": 73,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  const char* value = getenv(variable_name.c_str());"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a757eebdc69468b27b302a874cdd11543b0942b875b9695a8d402b6bc9a0917ad2d12a86118a940f69db193c5902fd9e813a24f3843d99ab3c61dc10915ff03e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8d020bd7-ce27-3524-8f49-453d70bbf092",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/data_compressor.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 11,
                  "endLine": 100,
                  "endColumn": 63,
                  "snippet": {
                    "text": "          alloca(sizeof(struct evbuffer_iovec) * buffer_count));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e354bf690068e1cc1a26f44836378988910a9938dc04d01867b870e40ff4b130d6abf6027165f9b0b33ac0776a8565acee43fef5221e90dc59279d199a53c0ed_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a8124711-2815-3416-8192-32c32d242f87",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/data_compressor.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 12,
                  "endLine": 175,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    size_t output_buffer_size = (source_byte_size > (1 << 20 /* 1MB */))\n                                    ? source_byte_size\n                                    : (1 << 20 /* 1MB */);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "51ad517096e37d8a8506e3ce571d0020299814776a0bfafb0a702e93f03e32a2d9dd07b26e7cf65671d8a73e7d148dee04309d198509aea355774caba29508e6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e41d78de-3caf-3107-9e6b-5e4b91c30ab9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/data_compressor.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 17,
                  "endLine": 208,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                alloca(sizeof(struct evbuffer_iovec) * buffer_count));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e354bf690068e1cc1a26f44836378988910a9938dc04d01867b870e40ff4b130d6abf6027165f9b0b33ac0776a8565acee43fef5221e90dc59279d199a53c0ed_1"
          },
          "properties": {}
        },
        {
          "ruleId": "fe93057f-9151-3870-8b03-502556aaed55",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/grpc/grpc_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 9,
                  "endLine": 344,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        delete call_data;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "364a0b8b3107c3c2d3a19f4ad5dcc84d25fad9279aa38a4b1a8b6885e834daf290c0cc1f42838d65ccdf845487ee006204adb20c505492291b8be1d0c525fd89_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1eb9bff8-571a-3768-a289-196bf1d07471",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/grpc/infer_handler.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 12,
                  "endLine": 395,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    size_t byte_size = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "78f8cc9a8de86cb22673d12b29d2ccc45a287177d79c2327d827d3f98e314f7ad5f00bc47231801ede5e84d653bf890f683edad47a2aeea65f55071e41db1b4f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f3174e22-9c8a-3a65-b5dd-8a39fe6af188",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/grpc/infer_handler.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1055,
                  "startColumn": 5,
                  "endLine": 1055,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    delete response;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e9cb904b92f1846c1a6e71645c3023bd848639267d1c071b65178b2e8c27bc1e409209e8ba8141062f21ed442d7a66bec4ff7ab71761a686f8edfa7a84a5802e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0e732751-e256-3b62-999c-6dda15fd3622",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/grpc/infer_handler.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 7,
                  "endLine": 106,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      delete response;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9cbe686f72874484dbff4208fa20638cdc31780d660a4316b39692de05219fb3da2001e94185a64c0a6ab96237095ee1902a9a485dc650cbfc8ed6d0356177df_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d9686ee2-dfed-37b9-9866-efb01740635d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/grpc/infer_handler.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 14,
                  "endLine": 550,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      size_t batch1_element_count = 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "44ec1be2e8dde3377c4b27eb9adc6721e93b8e7ad708dfba80f5f0d1b4d6280fd00effa7fa6839260febc51c2eed0214a26c29f4320df9ec2cd6a4092377bf4c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "67c6695f-bcd6-37c4-8214-907421eb88c5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/grpc/infer_handler.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 561,
                  "startColumn": 14,
                  "endLine": 561,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      size_t class_offset = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3f39e5f603c261311498b5a9a3bbce4f3d53e055d6bf03311fdcf67788830d39a21d6159f284224252ad43deb9903a695489c83fd0638b12f2be80cb3124ee83_0"
          },
          "properties": {}
        },
        {
          "ruleId": "28313bee-46ff-35d9-941a-4fbb625919fb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/grpc/infer_handler.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1007,
                  "startColumn": 24,
                  "endLine": 1007,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    const char* dstr = getenv(\"TRITONSERVER_DELAY_GRPC_RESPONSE\");"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "dc719cedd4a7aa9a900215a5463906f5ae871cb20ac53120c240236623659c3c6a75440bcc4547fedcf65d60fc8c1e77ee7ae10eb3bd14e9ed1a57a98d09df3e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5f41ad2f-56fa-3ac4-9246-38b7bb0bac0d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid the 'ato*()' family of functions. Their use can lead to undefined\nbehavior, integer overflows, and lack of appropriate error handling. Instead\nprefer the 'strtol*()' family of functions.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/grpc/infer_handler.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1010,
                  "startColumn": 28,
                  "endLine": 1010,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      delay_response_ms_ = atoi(dstr);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b3b0fa8f3bb38cd6842d2728059c50aa76d7816f165386caf474fc2ac2a4eafcdf318bdcacd3def4d027509ae1a636e4188dddcfc6cd54b72a2a71c5937be010_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d0c8bd78-de79-32f9-8fc9-af27b5011552",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/grpc/infer_handler.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1196,
                  "startColumn": 5,
                  "endLine": 1196,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    delete state;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f04ed160fab8ff90c9e8eae590e229b479087f0d286f1cdbe96d2dac43ad661651b182a2d3dea3178c3888b9afbd670ff1ec9c9f14f3e989267680acc08352d7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b1106e1c-fc70-34c7-9ef1-f9a4d98a2f4b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/grpc/infer_handler.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1252,
                  "startColumn": 5,
                  "endLine": 1252,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    delete state;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f04ed160fab8ff90c9e8eae590e229b479087f0d286f1cdbe96d2dac43ad661651b182a2d3dea3178c3888b9afbd670ff1ec9c9f14f3e989267680acc08352d7_1"
          },
          "properties": {}
        },
        {
          "ruleId": "623ebcc1-89e5-3cf4-b25d-fc65512f8e11",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 12,
                  "endLine": 352,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    size_t len = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9bec05384af488bec94d253b45c0668bc7aaabff9033833b7cd69585b84f648fd71ff1be8ae5818b7c5b87d96afb6b9cca0f3b73296407a01ce2675d6be1589e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ed680855-6924-32e5-8699-39538582221c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 16,
                  "endLine": 484,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        size_t len = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9bec05384af488bec94d253b45c0668bc7aaabff9033833b7cd69585b84f648fd71ff1be8ae5818b7c5b87d96afb6b9cca0f3b73296407a01ce2675d6be1589e_1"
          },
          "properties": {}
        },
        {
          "ruleId": "0191fdef-1a8b-3b41-a28f-97ce0ec76443",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 9,
                  "endLine": 493,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        memcpy(\n            base + *counter, reinterpret_cast<char*>(&len), sizeof(uint32_t));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3640589761706a511417820d80d2a39e22442bb84cdb2663a6cb0199d40cfd48d71c8e07dc2cecb309f4d1beaf2e4efc89002cdf39e6ed2c82ed9e8ee7f4c1a2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "74ae616b-bf63-32cd-ad41-c4869ecbc624",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 14,
                  "endLine": 715,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      size_t offset = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "581b77f541a28ac1ee77998540274c46cc9c75bdc95bc45a7ec0540745d14a3346b1673e571ab83acc6001a4a726e46165275464d751d8039e29bff9319eb27f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d7728016-efca-326f-b727-f3786ad65013",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 938,
                  "startColumn": 10,
                  "endLine": 938,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  size_t offset = 0, remaining_length = length;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "581b77f541a28ac1ee77998540274c46cc9c75bdc95bc45a7ec0540745d14a3346b1673e571ab83acc6001a4a726e46165275464d751d8039e29bff9319eb27f_1"
          },
          "properties": {}
        },
        {
          "ruleId": "b4a0398b-3f63-3ec9-a56d-8d3699d10640",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 948,
                  "startColumn": 7,
                  "endLine": 948,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      remaining_length = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "73daf63c667bee8e8bd091617447c7521216d6b4247071be66e724c6f8e9031ea12dbefd8b5e16329f805696931f5111ac96763c3aff78b465646ac2547bd6c1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5c6b52bb-94f9-3ffb-b297-8845ef252845",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 950,
                  "startColumn": 7,
                  "endLine": 950,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      remaining_length = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "73daf63c667bee8e8bd091617447c7521216d6b4247071be66e724c6f8e9031ea12dbefd8b5e16329f805696931f5111ac96763c3aff78b465646ac2547bd6c1_1"
          },
          "properties": {}
        },
        {
          "ruleId": "218c2ad8-d009-3f89-87ef-17dbf4a2f801",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 963,
                  "startColumn": 9,
                  "endLine": 963,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        remaining_length = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "73daf63c667bee8e8bd091617447c7521216d6b4247071be66e724c6f8e9031ea12dbefd8b5e16329f805696931f5111ac96763c3aff78b465646ac2547bd6c1_2"
          },
          "properties": {}
        },
        {
          "ruleId": "832955ab-0f38-32ae-afb3-bacee7a1578c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 970,
                  "startColumn": 7,
                  "endLine": 970,
                  "endColumn": 50,
                  "snippet": {
                    "text": "      memcpy(json_base + offset, base, base_size);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3640589761706a511417820d80d2a39e22442bb84cdb2663a6cb0199d40cfd48d71c8e07dc2cecb309f4d1beaf2e4efc89002cdf39e6ed2c82ed9e8ee7f4c1a2_1"
          },
          "properties": {}
        },
        {
          "ruleId": "70a08d22-9f18-3bf7-8ba1-d564628f32a9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 993,
                  "startColumn": 10,
                  "endLine": 993,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  size_t offset = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "581b77f541a28ac1ee77998540274c46cc9c75bdc95bc45a7ec0540745d14a3346b1673e571ab83acc6001a4a726e46165275464d751d8039e29bff9319eb27f_2"
          },
          "properties": {}
        },
        {
          "ruleId": "83245649-babf-3e88-9988-851e81356656",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 998,
                  "startColumn": 5,
                  "endLine": 998,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    offset = delimeter_pos + 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4fcbe8d8e35f6c949a926ec909f7550629c4aee68cb699064ee9af33709e672a3c2e7b208490f7e7f75df6102c269516756e57496088121babc2ff25d0b009e1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "248631fa-4bbf-317e-bd3c-8e8e5f53c4b1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1140,
                  "startColumn": 7,
                  "endLine": 1140,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      delete info;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c567d4f430d691a3d91b7573927a2bfc2b2039e7c14ac85694e623f1d3f8b77d4d35a3aa472dc149519e5fd6654a8fe55db7103b4680b18523141523b900136a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "310a7ff7-400f-3115-ae69-821eb890f958",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1177,
                  "startColumn": 7,
                  "endLine": 1177,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      delete info;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c567d4f430d691a3d91b7573927a2bfc2b2039e7c14ac85694e623f1d3f8b77d4d35a3aa472dc149519e5fd6654a8fe55db7103b4680b18523141523b900136a_1"
          },
          "properties": {}
        },
        {
          "ruleId": "bf66f4d5-c1b1-30d6-8280-11aafc271ab0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1266,
                  "startColumn": 3,
                  "endLine": 1266,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  delete info;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c567d4f430d691a3d91b7573927a2bfc2b2039e7c14ac85694e623f1d3f8b77d4d35a3aa472dc149519e5fd6654a8fe55db7103b4680b18523141523b900136a_2"
          },
          "properties": {}
        },
        {
          "ruleId": "38d83d55-5b63-3d4b-8806-aaeb2e6f551f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1311,
                  "startColumn": 9,
                  "endLine": 1311,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        alloca(sizeof(struct evbuffer_iovec) * n));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff27013d9aac07b7ecd053e4f27f90da2e864680fd2af2ae83446279d9abf100d59db538d3aa3e9d8f35a98a46c8d64906caed3de678ac8a2802d4ae64d0ff86_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8d9bdc16-c5bb-31b4-b33e-9f43dfa23c03",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1383,
                  "startColumn": 13,
                  "endLine": 1383,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            alloca(sizeof(struct evbuffer_iovec) * n));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff27013d9aac07b7ecd053e4f27f90da2e864680fd2af2ae83446279d9abf100d59db538d3aa3e9d8f35a98a46c8d64906caed3de678ac8a2802d4ae64d0ff86_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f674d653-83a1-38b6-9f9e-2e5780f34346",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1397,
                  "startColumn": 15,
                  "endLine": 1397,
                  "endColumn": 29,
                  "snippet": {
                    "text": "              delete params;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ad62e0e9bd86af9faa7d9e08d9ea46755006c62461330bee66fd041b878aa755a6b051eaa6c883a1051e30a4345abe73eb231676adeb06e8e97b3067fbc955d1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6bbed03b-aa67-333c-955a-4c44ff9ba1b2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1422,
                  "startColumn": 20,
                  "endLine": 1422,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            size_t param_len = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5589bdf01af66904437160e2a7c3b457558af876e7906c6636aea7149dde3bc380293eab5f2caa69fc7dba60c065677674fc1ea5cdf6de5c6450c3740de70c40_0"
          },
          "properties": {}
        },
        {
          "ruleId": "af0f17bc-e020-3ee0-a1f6-c8fe0c64588d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1438,
                  "startColumn": 22,
                  "endLine": 1439,
                  "endColumn": 72,
                  "snippet": {
                    "text": "              size_t decoded_size = base64_decode_block(\n                  param_str, param_len, binary_files.back().data(), &s);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9ef8478f681829ada62de2aac25bc5a985a2625eb9de9d2a9311a0060002180e5259b1f9e0f17f5e18fa70dfa5a2aec7f47b6ebd5ed3c3a37bc7ef9a5494ec78_0"
          },
          "properties": {}
        },
        {
          "ruleId": "03412de7-9731-3c14-bbf8-990f2443eda3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1469,
                  "startColumn": 15,
                  "endLine": 1469,
                  "endColumn": 56,
                  "snippet": {
                    "text": "              alloca(sizeof(struct evbuffer_iovec) * n));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff27013d9aac07b7ecd053e4f27f90da2e864680fd2af2ae83446279d9abf100d59db538d3aa3e9d8f35a98a46c8d64906caed3de678ac8a2802d4ae64d0ff86_2"
          },
          "properties": {}
        },
        {
          "ruleId": "f82ca54d-4f70-35d5-a517-b8c7c9414333",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1722,
                  "startColumn": 11,
                  "endLine": 1722,
                  "endColumn": 52,
                  "snippet": {
                    "text": "          alloca(sizeof(struct evbuffer_iovec) * n));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff27013d9aac07b7ecd053e4f27f90da2e864680fd2af2ae83446279d9abf100d59db538d3aa3e9d8f35a98a46c8d64906caed3de678ac8a2802d4ae64d0ff86_3"
          },
          "properties": {}
        },
        {
          "ruleId": "6d86d3b1-6b82-32c4-a128-9fdbcc96b83b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1955,
                  "startColumn": 11,
                  "endLine": 1955,
                  "endColumn": 52,
                  "snippet": {
                    "text": "          alloca(sizeof(struct evbuffer_iovec) * n));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff27013d9aac07b7ecd053e4f27f90da2e864680fd2af2ae83446279d9abf100d59db538d3aa3e9d8f35a98a46c8d64906caed3de678ac8a2802d4ae64d0ff86_4"
          },
          "properties": {}
        },
        {
          "ruleId": "5dcac3d0-22c5-3643-aa12-f819b03370ca",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2144,
                  "startColumn": 13,
                  "endLine": 2144,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            alloca(sizeof(struct evbuffer_iovec) * n));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff27013d9aac07b7ecd053e4f27f90da2e864680fd2af2ae83446279d9abf100d59db538d3aa3e9d8f35a98a46c8d64906caed3de678ac8a2802d4ae64d0ff86_5"
          },
          "properties": {}
        },
        {
          "ruleId": "755efbd5-24ce-304d-90fe-e74f45790187",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2248,
                  "startColumn": 13,
                  "endLine": 2248,
                  "endColumn": 54,
                  "snippet": {
                    "text": "            alloca(sizeof(struct evbuffer_iovec) * n));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff27013d9aac07b7ecd053e4f27f90da2e864680fd2af2ae83446279d9abf100d59db538d3aa3e9d8f35a98a46c8d64906caed3de678ac8a2802d4ae64d0ff86_6"
          },
          "properties": {}
        },
        {
          "ruleId": "296dd669-c86b-3eee-a6ab-4ce1fef82a68",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2261,
                  "startColumn": 18,
                  "endLine": 2261,
                  "endColumn": 36,
                  "snippet": {
                    "text": "          size_t b64_handle_len = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8c9f9a739b324807c2bfaef67a4a88376894bf5ff568e53fe68e13cf376daf4de2cc5f712336b56734d0ea5a2901651edbdb4a22f15090e32eb3d1aeabe4242f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6fc26988-b127-350e-9ee5-166969a12e5f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2288,
                  "startColumn": 20,
                  "endLine": 2289,
                  "endColumn": 67,
                  "snippet": {
                    "text": "            size_t decoded_size = base64_decode_block(\n                b64_handle, b64_handle_len, raw_handle.data(), &s);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5d4db4fdcc0f85205018db2eb76329a9028e4923601830ff8081b79255597e2817dc2e397aa9c5e35a0123daaee19eef34f156a5a5a0f8b3dc7fcbae79cc9e81_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4fff5ab7-9812-3840-ba33-c51528e47cd2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2508,
                  "startColumn": 11,
                  "endLine": 2508,
                  "endColumn": 24,
                  "snippet": {
                    "text": "          byte_size = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cec661aaeeef19af6c0f53828ca1370491eecd7d305253d289069cfad25bb40441348da74f20d39e77192374517e90efef9f023b7944fe3eb44ac5d4a6a06255_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a72ab24e-5171-3149-aba6-1dd21cf4d69d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2810,
                  "startColumn": 9,
                  "endLine": 2810,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        alloca(sizeof(struct evbuffer_iovec) * n));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff27013d9aac07b7ecd053e4f27f90da2e864680fd2af2ae83446279d9abf100d59db538d3aa3e9d8f35a98a46c8d64906caed3de678ac8a2802d4ae64d0ff86_7"
          },
          "properties": {}
        },
        {
          "ruleId": "86fff8a0-1ce6-36b0-a6dc-580c5ee879be",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2839,
                  "startColumn": 9,
                  "endLine": 2839,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        alloca(sizeof(struct evbuffer_iovec) * n));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff27013d9aac07b7ecd053e4f27f90da2e864680fd2af2ae83446279d9abf100d59db538d3aa3e9d8f35a98a46c8d64906caed3de678ac8a2802d4ae64d0ff86_8"
          },
          "properties": {}
        },
        {
          "ruleId": "ba15aa3b-ebc9-3462-bd74-1292cc0f5dd2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2883,
                  "startColumn": 11,
                  "endLine": 2883,
                  "endColumn": 52,
                  "snippet": {
                    "text": "          alloca(sizeof(struct evbuffer_iovec) * n));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff27013d9aac07b7ecd053e4f27f90da2e864680fd2af2ae83446279d9abf100d59db538d3aa3e9d8f35a98a46c8d64906caed3de678ac8a2802d4ae64d0ff86_9"
          },
          "properties": {}
        },
        {
          "ruleId": "719c5953-de2e-3c00-baec-82605234197d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2898,
                  "startColumn": 9,
                  "endLine": 2898,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        byte_size = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cec661aaeeef19af6c0f53828ca1370491eecd7d305253d289069cfad25bb40441348da74f20d39e77192374517e90efef9f023b7944fe3eb44ac5d4a6a06255_1"
          },
          "properties": {}
        },
        {
          "ruleId": "0e416ced-0837-3c3f-bd87-670427f51c5a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2900,
                  "startColumn": 9,
                  "endLine": 2900,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        base_size = v[v_idx].iov_len;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f6bcefa25ab6770a7a210c47992f27477283a32e1e07c6330bdd566abcfb8badaecbcea189e9c60565aca3da8d90ef3bc0aaa66ebe5c7a0b4d6acc6f997742e2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b5fdd673-25bf-3788-a0ab-0837bbc8fde4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3336,
                  "startColumn": 12,
                  "endLine": 3336,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    size_t element_cnt = tensor_data.IsArray() ? tensor_data.ArraySize() : 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4a50c799d72f24f82bf680d866df10c381dfb7b04926bad0706bd2fe294bd9197acf432a8d0b0f0c0df41e71f066383ed0e4468319d5ffd3613b2f9dafb3fcaa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fe3ca2d2-f57f-38ac-a0e1-bb551ea59d09",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3338,
                  "startColumn": 12,
                  "endLine": 3338,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    size_t byte_size = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cec661aaeeef19af6c0f53828ca1370491eecd7d305253d289069cfad25bb40441348da74f20d39e77192374517e90efef9f023b7944fe3eb44ac5d4a6a06255_2"
          },
          "properties": {}
        },
        {
          "ruleId": "f938a037-8dba-3333-bcf4-eb2214e57438",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3381,
                  "startColumn": 11,
                  "endLine": 3381,
                  "endColumn": 26,
                  "snippet": {
                    "text": "          element_cnt = 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4a50c799d72f24f82bf680d866df10c381dfb7b04926bad0706bd2fe294bd9197acf432a8d0b0f0c0df41e71f066383ed0e4468319d5ffd3613b2f9dafb3fcaa_1"
          },
          "properties": {}
        },
        {
          "ruleId": "a80c1786-bf9e-3c38-8dc1-084a6346aa65",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3441,
                  "startColumn": 10,
                  "endLine": 3441,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  size_t header_length = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9635f89e03ca2d7e5a8ad2fc3f0f9c628d77431d314e5a720efd25d0ef8f01b579264ac43e3ade8520f0844a04956e61458950fbd9de60363a02bd19735ca10c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "97781a9d-bd4a-3f7d-8557-f36e1639a7a7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3550,
                  "startColumn": 3,
                  "endLine": 3550,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  delete infer_request;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1592476aa0ab9fb2c2c339f8058021949fb6dc5eaf99191fd65d227aabf36d0fde6b1b047382d793b71e29d20b9007cbe2fbcda2b2ff5b707fee78a2b169db4e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "14bce7cc-52ba-3a13-bc57-a9bc40bf2423",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3572,
                  "startColumn": 3,
                  "endLine": 3572,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  delete infer_request;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1592476aa0ab9fb2c2c339f8058021949fb6dc5eaf99191fd65d227aabf36d0fde6b1b047382d793b71e29d20b9007cbe2fbcda2b2ff5b707fee78a2b169db4e_1"
          },
          "properties": {}
        },
        {
          "ruleId": "7af63c6d-2026-36e8-bc72-e16b91946059",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3756,
                  "startColumn": 12,
                  "endLine": 3756,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    size_t element_count = 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "379e4fb48844d07bf75ae99a83835abd259066c222dfd34081698b612351bc9dbe968a9f22b0a219c84030dffc867c1b7668f54941567cc28fb0096ec92064b6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "528e5aa0-da1a-31d0-9dba-6dc047d8f052",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3777,
                  "startColumn": 14,
                  "endLine": 3777,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      size_t batch1_element_count = 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f773afe0af4594931c966b2e9408ac07e81a8801f5e367dd6efc9f59b07d28be4e0d6774fb19aa220ab7a5e741e748fc7441c0a4a45ab3d6d2c1a9da1d0c2415_0"
          },
          "properties": {}
        },
        {
          "ruleId": "16ea9673-56e4-3886-bf6a-b95c0fc8aa1f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3789,
                  "startColumn": 14,
                  "endLine": 3789,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      size_t class_offset = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4754def19708e4d7b6aa052845f450f3791371b5d6d2651716eda1b597df4e9277414f30496f920d756f73a80c80ea9fb90f53a247c1d9afb65db2ccf7142058_0"
          },
          "properties": {}
        },
        {
          "ruleId": "837274d0-1858-3578-b76b-3cda0b4734f8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3833,
                  "startColumn": 7,
                  "endLine": 3833,
                  "endColumn": 52,
                  "snippet": {
                    "text": "      memcpy(buffer, serialized.c_str(), byte_size);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3640589761706a511417820d80d2a39e22442bb84cdb2663a6cb0199d40cfd48d71c8e07dc2cecb309f4d1beaf2e4efc89002cdf39e6ed2c82ed9e8ee7f4c1a2_2"
          },
          "properties": {}
        },
        {
          "ruleId": "20c0e5d3-a356-3c00-9ff7-8fd5003c3c30",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4054,
                  "startColumn": 3,
                  "endLine": 4054,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  delete infer_request;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1592476aa0ab9fb2c2c339f8058021949fb6dc5eaf99191fd65d227aabf36d0fde6b1b047382d793b71e29d20b9007cbe2fbcda2b2ff5b707fee78a2b169db4e_2"
          },
          "properties": {}
        },
        {
          "ruleId": "8b5397c1-410a-3ed7-83d4-c3b3df3a4cf9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/http_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4358,
                  "startColumn": 14,
                  "endLine": 4358,
                  "endColumn": 31,
                  "snippet": {
                    "text": "      size_t element_count = 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "379e4fb48844d07bf75ae99a83835abd259066c222dfd34081698b612351bc9dbe968a9f22b0a219c84030dffc867c1b7668f54941567cc28fb0096ec92064b6_1"
          },
          "properties": {}
        },
        {
          "ruleId": "43b86d86-c5dd-346e-aa25-f21549a9ec47",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 7,
                  "endLine": 393,
                  "endColumn": 31,
                  "snippet": {
                    "text": "      delete (*trace_manager);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7bea57a207ad537543ab317b10f4dc10031ab1812240917c562bbd14d69895d9bf6eb91a0c0a0642cc345b439502a0063310b45cbb84390aeacc3916de0c06bc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "56f38581-d2e4-3e1b-adcf-a05f1d3b4823",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 3,
                  "endLine": 409,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  delete (*trace_manager);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7bea57a207ad537543ab317b10f4dc10031ab1812240917c562bbd14d69895d9bf6eb91a0c0a0642cc345b439502a0063310b45cbb84390aeacc3916de0c06bc_1"
          },
          "properties": {}
        },
        {
          "ruleId": "4fc2ced2-dc29-3058-b628-22a874ecbb40",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/memory_alloc.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 15,
                  "endLine": 117,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        err = hipMalloc(&allocated_ptr, byte_size);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4508eb4cafe0145b9f6f8e64c61830e5083aa7cd972f9fcf7c08ee542b40c29358b7f163f05d8f2af6207e55276749611d70819c6852dcc0ba7399957a2e214c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "65dca02f-7f87-35ae-b622-aa9df6c38137",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/memory_alloc.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 5,
                  "endLine": 170,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    free(buffer);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "058e878aaa157614bf71febceaa1ee29d29b758efd08f1d3e3641c7b931cf927d3822b65979a091e2fa8802938c5274004b7ed8299d46c8a61443609c7441f87_0"
          },
          "properties": {}
        },
        {
          "ruleId": "89f9ac47-301d-3ca5-94ef-79456f681600",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/memory_alloc.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 5,
                  "endLine": 206,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    delete p;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7f8a6ac524cc4aeaed881cee957e68f8638e14ab80d296d3ff4ce6c07064b057386486b1a24f22c0d3142e41202f4468c476bf3f51af8904d7fdcaa4a1e429a0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5202a9d9-7c75-3ca6-a13a-20ce094996a0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/memory_alloc.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 17,
                  "endLine": 443,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  while ((opt = getopt(argc, argv, \"vi:o:r:m:h:\")) != -1) {"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d322f16921bfb53a12182a76fd8cc5912dd9d2785cdf5724f2fd92fe8bdd9237cb775b83e529f4deff1ed374631f876c4bcf3d8221cb06d3c3f3d71167d02038_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3a5dcc39-2725-3538-aa83-64d2b1a908ef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/memory_alloc.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 10,
                  "endLine": 541,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  size_t health_iters = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d7a1654e629f67c5ac27578f1723de9f38b9c0d33444c73b2e1bd03747bdf31de27fd57b78d3c1d4e943e4d284cd26111a89cf3bbac50c3f0699fafe557eb277_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cbd3377f-ebe5-3c51-8857-69cf2c8d2098",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/memory_alloc.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 3,
                  "endLine": 588,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  health_iters = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d7a1654e629f67c5ac27578f1723de9f38b9c0d33444c73b2e1bd03747bdf31de27fd57b78d3c1d4e943e4d284cd26111a89cf3bbac50c3f0699fafe557eb277_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ece7b73f-5a5f-3a9d-a2d8-83525dba7860",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/memory_alloc.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 732,
                  "startColumn": 9,
                  "endLine": 732,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        hipMalloc(&dst, input0_size), \"allocating GPU memory for INPUT0 data\");"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4508eb4cafe0145b9f6f8e64c61830e5083aa7cd972f9fcf7c08ee542b40c29358b7f163f05d8f2af6207e55276749611d70819c6852dcc0ba7399957a2e214c_1"
          },
          "properties": {}
        },
        {
          "ruleId": "88f2ab9a-038d-32db-8853-90b29d20ed8a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/memory_alloc.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 738,
                  "startColumn": 9,
                  "endLine": 738,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        hipMalloc(&dst, input1_size), \"allocating GPU memory for INPUT1 data\");"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4508eb4cafe0145b9f6f8e64c61830e5083aa7cd972f9fcf7c08ee542b40c29358b7f163f05d8f2af6207e55276749611d70819c6852dcc0ba7399957a2e214c_2"
          },
          "properties": {}
        },
        {
          "ruleId": "ebc03818-127e-3544-97bb-f06b7bf83fd4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/multi_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 15,
                  "endLine": 160,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        err = hipMalloc(&allocated_ptr, byte_size);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cdb265029c283c650198e6cd54fb5952305d615dcd81660d04e8e09817447a5904ef0980a1108d006577b29f2c98be469782d4677992bb13e01e6814c86837cf_0"
          },
          "properties": {}
        },
        {
          "ruleId": "de6a4fc8-2d41-35be-b93f-5867bf4c2e90",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/multi_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 7,
                  "endLine": 214,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      free(buffer);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06d4f4a09f88eba2705032adc49a31be691d9d1bbc35a0142408f1660da24a978b89c857faba7eef325ceb6012d4edeb6143fbe0c07f814a88d71a42775c0676_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4ce0f957-be35-3593-a790-575a3459444b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/multi_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 3,
                  "endLine": 246,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  delete name;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "366fb627f1f9cdeebf78db731d520ae6d8efd40af15dad634da047e2b1cc7264672c67fcaba55a843029dc1c26b21c8d4ce7438453379e4f8588a6c562832410_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5bae0a20-92ad-35e5-ad46-18aa574724d9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/multi_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 5,
                  "endLine": 267,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    delete p;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "00e0537235bb04fd59c0eff89ea0c0c60e2881ceab95b9ee955dbcbb83e81d6978a6158c74708e0153f6b04d741b16299ca3e35acce407837956c88fcdb5c9a8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "07482827-7610-3d91-ad50-2e43263ddeb7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/multi_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 10,
                  "endLine": 504,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  size_t wait_seconds = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f8c2830b59bb5cdec34561372f5a972c2830ece11ac24efef52f03c0127f175bfe85bf35d4eb233a89ce1f6755354469e08aad51e0ed1011efc6ee9e2327056_0"
          },
          "properties": {}
        },
        {
          "ruleId": "81acb1fd-601f-3aca-ae4f-766f3856c4c1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/multi_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 10,
                  "endLine": 554,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  size_t wait_seconds = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f8c2830b59bb5cdec34561372f5a972c2830ece11ac24efef52f03c0127f175bfe85bf35d4eb233a89ce1f6755354469e08aad51e0ed1011efc6ee9e2327056_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c6d85a55-7a35-30b8-9dc2-5bc04e9a35c7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/multi_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 668,
                  "startColumn": 10,
                  "endLine": 668,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  size_t input0_size = input0_data.size() * 4;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "31d8a23218661db5131835cf58d23e0a7ebca0f57a405013343777d4af5ce2610b144e4c404d1cb05eece5a82be5fc2302fdbb952ed6291d1179576f3eac38ca_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6d7e150c-eb06-36a7-a290-a2ca22f3be2b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/multi_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 10,
                  "endLine": 669,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  size_t input1_size = input1_data.size() * 4;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f5d644e5f5b6b249d321307674b1e6a438426e2cd065f3e7bcf8ea83881fb8cec5e68307a5d7a3cf36cdff2708dfa602cb9df7ea046f1556c2647033920cf839_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7d7ed61f-5fa9-3304-8a8f-fb028e75eb1c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/multi_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 686,
                  "startColumn": 11,
                  "endLine": 686,
                  "endColumn": 39,
                  "snippet": {
                    "text": "          hipMalloc(&dst, input0_size),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cdb265029c283c650198e6cd54fb5952305d615dcd81660d04e8e09817447a5904ef0980a1108d006577b29f2c98be469782d4677992bb13e01e6814c86837cf_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e602a492-6ec4-3f4e-af0c-2e1c0a157b9c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/multi_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 693,
                  "startColumn": 11,
                  "endLine": 693,
                  "endColumn": 39,
                  "snippet": {
                    "text": "          hipMalloc(&dst, input1_size),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cdb265029c283c650198e6cd54fb5952305d615dcd81660d04e8e09817447a5904ef0980a1108d006577b29f2c98be469782d4677992bb13e01e6814c86837cf_2"
          },
          "properties": {}
        },
        {
          "ruleId": "818820d0-983b-36a0-8611-b807ba237a11",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/multi_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 910,
                  "startColumn": 17,
                  "endLine": 910,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  while ((opt = getopt(argc, argv, \"vm:r:t:l:\")) != -1) {"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1ffb3d751f8bdb3dccd19db392856c41379417dc34bfbf3c205898d6a67964187c3c65fefd94b002aed9d99c589de1986c44f696ea07e9600051743de8be0239_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a38e5f1c-bd4e-349c-ad67-9a0651310a5b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sagemaker_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 10,
                  "endLine": 63,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  size_t offset = 0, remaining_length = length;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "84406f1e14669538f0d49845c7bdd695dd5f501b06e2bbf9cf1697b2520822def00de3d0a3a2e8c163d93e4a5a71fa17f2d0474c70d919aa903d010d5be2ae85_0"
          },
          "properties": {}
        },
        {
          "ruleId": "022b865b-aa2e-3a13-842c-65318e56f025",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sagemaker_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 7,
                  "endLine": 73,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      remaining_length = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f263003d47696d4fe72f4883d68a188cc3bf2eed8c428ee947a43bc3ab473361b0bdbcdd88427aed66c6b39acf0b73d6b0e286e7abb7d0fd04f73d655f75a535_0"
          },
          "properties": {}
        },
        {
          "ruleId": "220d0299-771c-320c-bc39-65dd2140849e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sagemaker_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 7,
                  "endLine": 75,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      remaining_length = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f263003d47696d4fe72f4883d68a188cc3bf2eed8c428ee947a43bc3ab473361b0bdbcdd88427aed66c6b39acf0b73d6b0e286e7abb7d0fd04f73d655f75a535_1"
          },
          "properties": {}
        },
        {
          "ruleId": "2696be41-a52f-3934-8cd6-0196ce616b36",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sagemaker_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 9,
                  "endLine": 88,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        remaining_length = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f263003d47696d4fe72f4883d68a188cc3bf2eed8c428ee947a43bc3ab473361b0bdbcdd88427aed66c6b39acf0b73d6b0e286e7abb7d0fd04f73d655f75a535_2"
          },
          "properties": {}
        },
        {
          "ruleId": "1dbd8abd-13bb-3c9a-a3a2-f50e6527885f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sagemaker_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 7,
                  "endLine": 95,
                  "endColumn": 50,
                  "snippet": {
                    "text": "      memcpy(json_base + offset, base, base_size);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1eddb808d81743e0530d87ea8d2127fabaf1492d9b54a1464e65b9c359f8ae913ff67b21b6b87daed5fe571583e7ab2bfa354c62959839d249d8108c7d3ad743_0"
          },
          "properties": {}
        },
        {
          "ruleId": "426d2f16-6c69-34d1-9f46-78807d5ddb47",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sagemaker_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 9,
                  "endLine": 310,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        alloca(sizeof(struct evbuffer_iovec) * n));"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "60b0a70e31a6ac7685f85006b6f3507474e531e15077044732a2420e1f46075d3df7cf57c5f65732335c793fd3f979975ef7416244209396b142324b195350ce_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a67112e2-233c-3234-8c1c-491fe202838b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sagemaker_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 450,
                  "startColumn": 3,
                  "endLine": 450,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  delete infer_request;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1e863b3f5be15ec077abb3e09799f6d43213d090c88982899582c305f26444b4bc9e8a5f45844a1ab1a473d90349ca0a826a5c8f9abbad6ff5d7cdc14f44ed74_0"
          },
          "properties": {}
        },
        {
          "ruleId": "818459fb-b74f-3630-bf8b-8d61dcbb2915",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sagemaker_server.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1060,
                  "startColumn": 7,
                  "endLine": 1060,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  if (stat(config_path.c_str(), &buffer) == 0) {"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d9b2bdf243a38924705cd39ed62cd122e9cd95e651ac153dd0eb7ee919884e873f89bf03766e15da213d6882449b5b03155af3853eda6634046e984dd7bf19ae_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bd6536f5-8713-3646-b64c-4335ea1a9935",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/shared_memory_manager.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 13,
                  "endLine": 136,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  *shm_fd = shm_open(shm_key.c_str(), O_RDWR, S_IRUSR | S_IWUSR);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2b910b7b91f959d59ee8557c35148b15e8c2980ebde178a0ba82f4b4a1b5d700811040bda2d7fee6a1593e0e319c2219bc1f8ae34c15363518a198c901eb35f7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "766fcf05-6a28-343e-9708-83232145b6b3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/shared_memory_manager.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 7,
                  "endLine": 186,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  int status = munmap(mapped_addr, byte_size);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3fa4fb80dee422ef83025b9c6d2f85dc0b2e36efdc43a8a8a84d3bb386d42bee9058e036458d9b33f3c7190773fef759fd078a781d63a0bd80b35609f0590827_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ad2af9d5-f973-3b16-ac8d-006e748e87fe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/simple.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 15,
                  "endLine": 158,
                  "endColumn": 51,
                  "snippet": {
                    "text": "        err = hipMalloc(&allocated_ptr, byte_size);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4549842a5695235995cb1341d89f877d75be8a865c8a6f2aa936bcd539ccadd4f62c8f504ae2ce093871cddc837efb770258cd510bb8d38ee9b16dd11cc5e6bf_0"
          },
          "properties": {}
        },
        {
          "ruleId": "149e64d3-06a6-368e-91c3-fe026d755cc8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/simple.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 7,
                  "endLine": 212,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      free(buffer);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "83246b7657f8112ace00c22b395406d0877114f5420b0fde11e0ac35a3d5f1bd231b0ee7795f6848566742372279d9df102fb1508cd89dc78320c65b1541fb32_0"
          },
          "properties": {}
        },
        {
          "ruleId": "15e41cb6-93d8-389b-ba31-abfc5e3a77be",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/simple.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 3,
                  "endLine": 244,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  delete name;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9d4e9dff11820cb4eafb13bb8757132d113bed515696ba421ea39a832bb086c07ff9d545ae122c3b86bed4c1149c17b80348de1ef390e9a2162cf539f80da54a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8f5d887e-637c-31c0-a469-184ae073d830",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/simple.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 5,
                  "endLine": 266,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    delete p;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "707dde62b2639dff0c40f8a40213e2bc4284e20446af1e39d848f7e98bc69d130ebef207f3164a9e585cf228a580deadce5dfd154602fdd6b2eee5f164944085_0"
          },
          "properties": {}
        },
        {
          "ruleId": "96e82e3a-11c2-374c-8de2-fff49725cb6e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/simple.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  while ((opt = getopt(argc, argv, \"vm:r:\")) != -1) {"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2d0503b3158e03af9e7746a8c69e8023bb84f45e21f89421fa9f508a403b24c82b58f853609a1620b6a14f822f47e4a31a2aa0c0a0fded1b8bbabdce76218de6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e62b9f9c-2770-3178-9002-670bedb25c41",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/simple.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 10,
                  "endLine": 581,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  size_t health_iters = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "915efadc4833a1bd5145dcb66241d17fe87cf76464c42b5241bf544002139853877092a9a510658a63d8158d4dcad4576f8f3508f67cdef0ca5696261110f4ff_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ffbfa2cc-5d4e-325f-ac3f-27fa6d7cf6a1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/simple.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 3,
                  "endLine": 634,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  health_iters = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "915efadc4833a1bd5145dcb66241d17fe87cf76464c42b5241bf544002139853877092a9a510658a63d8158d4dcad4576f8f3508f67cdef0ca5696261110f4ff_1"
          },
          "properties": {}
        },
        {
          "ruleId": "7be7c59b-ee00-32aa-a3c9-613ca28a8b50",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/simple.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 11,
                  "endLine": 798,
                  "endColumn": 39,
                  "snippet": {
                    "text": "          hipMalloc(&dst, input0_size),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4549842a5695235995cb1341d89f877d75be8a865c8a6f2aa936bcd539ccadd4f62c8f504ae2ce093871cddc837efb770258cd510bb8d38ee9b16dd11cc5e6bf_1"
          },
          "properties": {}
        },
        {
          "ruleId": "92718cf5-185f-31b0-bcb5-7f1fb93bb921",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/simple.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 11,
                  "endLine": 805,
                  "endColumn": 39,
                  "snippet": {
                    "text": "          hipMalloc(&dst, input1_size),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4549842a5695235995cb1341d89f877d75be8a865c8a6f2aa936bcd539ccadd4f62c8f504ae2ce093871cddc837efb770258cd510bb8d38ee9b16dd11cc5e6bf_2"
          },
          "properties": {}
        },
        {
          "ruleId": "90439203-e9d4-343a-86c7-ed1fb4ad95ed",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/tracer.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 5,
                  "endLine": 644,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    delete ts;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "903f58ac1548bc627fe53efdcbda77d0ab4c8f6203c98591a11edd53d272df394691db62c88ce12a8f222b4947ed617f76ac4bd8543a80f9ad50c7a368f16f5b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6ac1cfae-a3a0-3143-a916-372154e82281",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/tracer.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 764,
                  "startColumn": 19,
                  "endLine": 764,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    buffer_base = malloc(byte_size);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2085131070be87a2a3c5c1638a677a86d002335498bf1297b560c1f1c31e656fb66c0a56d30ea172b654a58875fc520c24a7d5f7c47454016ea664e48b1d865a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "506f1bbe-f387-30e5-9fe6-3853426d5118",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/tracer.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 816,
                  "startColumn": 12,
                  "endLine": 816,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    size_t element_count = 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5c380f20e03c18bf58a9169b4490a8a7b89e0e78c0f22c1becd8c193ced20341c27a437416c62608d652fb0f50766fe72a45b1ed7f72714deb19d9c8c8970a74_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cf52acf8-f363-3109-81db-dcac2b17946b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/tracer.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 933,
                  "startColumn": 16,
                  "endLine": 933,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        size_t offset = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "15c82fc9cb3eea3974db1d1e88a6c4a2fddb6d6a2d663056b3e9acfb14a91ae699a1049466a7c710382785bd584243a7975fd5e239f3ef96196eeedd54f449ab_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ae147755-4003-3efc-b14a-32fefa980e26",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/tracer.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 971,
                  "startColumn": 7,
                  "endLine": 971,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      free(buffer_base);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1f98fa24ea904ba8fc5b898f431890df40b553b1b1df6abb86ba0a99280062d4d6a188173164bab94e29277e53ee0de6c8091e6217691c323f6cf8d9306fb7e1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "06d925c3-f1cf-39a9-9c2b-20d1f18a40be",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/tracer.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1044,
                  "startColumn": 7,
                  "endLine": 1044,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      delete trace_userp;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7a7831d19da370d90fc01c3640a6e43da0e63b51a50395771241318bcb2535e9c5a176e7969fc86dddc4b4f1c20e979e5b9d9222ec3afec67cec6b2e42000a7f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "67e44360-d1a5-3daa-8c6e-328ccdac3ab4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/tracer.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1086,
                  "startColumn": 10,
                  "endLine": 1086,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  size_t stream_count = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e41029886d47f6a428868908681102db4e640e469457041019b48c378719718dc72c517dad319eaca430be2756df807d02abdaae593b97562560aa40c17fb633_0"
          },
          "properties": {}
        },
        {
          "ruleId": "37edd5b1-30a9-3713-92be-33f49ab7354e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/triton_signal.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 3,
                  "endLine": 123,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  signal(signum, SIG_DFL);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4508a4e25e9577a12ef762e77e4020501e38f0be69e5b4016deed0d1bfb5bfaa595c68277fab119e7e342ee08b0c6addb805a14910a42bae29a11203fd70f429_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fd41eb2e-1030-38bc-aede-79ee61adfb05",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/triton_signal.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 3,
                  "endLine": 133,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  signal(SIGINT, SignalHandler);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4508a4e25e9577a12ef762e77e4020501e38f0be69e5b4016deed0d1bfb5bfaa595c68277fab119e7e342ee08b0c6addb805a14910a42bae29a11203fd70f429_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ba0d7b5c-42aa-3e78-bc8a-8cf052208b16",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/triton_signal.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3,
                  "endLine": 134,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  signal(SIGTERM, SignalHandler);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4508a4e25e9577a12ef762e77e4020501e38f0be69e5b4016deed0d1bfb5bfaa595c68277fab119e7e342ee08b0c6addb805a14910a42bae29a11203fd70f429_2"
          },
          "properties": {}
        },
        {
          "ruleId": "ec5b9225-5294-3d60-9ab6-2d4c34e6bdbd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/triton_signal.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 3,
                  "endLine": 137,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  signal(SIGSEGV, ErrorSignalHandler);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4508a4e25e9577a12ef762e77e4020501e38f0be69e5b4016deed0d1bfb5bfaa595c68277fab119e7e342ee08b0c6addb805a14910a42bae29a11203fd70f429_3"
          },
          "properties": {}
        },
        {
          "ruleId": "6a20af19-b586-371c-857e-86e4297707cf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/triton_signal.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 3,
                  "endLine": 138,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  signal(SIGABRT, ErrorSignalHandler);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4508a4e25e9577a12ef762e77e4020501e38f0be69e5b4016deed0d1bfb5bfaa595c68277fab119e7e342ee08b0c6addb805a14910a42bae29a11203fd70f429_4"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}